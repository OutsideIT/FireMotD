#!/bin/bash
# Script name:  FireMotD
# Version:      v5.05.160628
# Created on:   10/02/2014
# Author:       Willem D'Haese
# Purpose:      Bash script that will dynamically generate a message
#               of they day for users logging in.
# On GitHub:    https://github.com/willemdh/FireMotD
# On OutsideIT: https://outsideit.net/FireMotD
# Recent History:
#   01/05/16 => Swap and Memory percentages /var/tmp/updatecount.txt
#   19/05/16 => Migration to FireMotD
#   27/05/16 => Fix for WriteLog on OpenSUSE
#   24/06/16 => Added new options, help and version messages (tavinus)
#   25/06/16 => Cleanup for release and better colortest 
#   28/06/16 => Colortest has default string, script aborts if no parameters 
# Copyright:
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version. This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details. You should have received a copy of the
# GNU General Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# Modified: Jun 24 2016 by Gustavo Neves

Verbose=0
UpdateFile=/var/tmp/updatecount.txt
ScriptName="$(readlink -e $0)"
ScriptVersion=" $(cat $ScriptName | grep "# Version:" | awk {'print $3'} | tr -cd '[[:digit:].-]' | sed 's/.\{2\}$//') "

WriteLog () {
    if [ -z "$1" ] ; then
        echo "WriteLog: Log parameter #1 is zero length. Please debug..."
        exit 1
    else
        if [ -z "$2" ] ; then
            echo "WriteLog: Severity parameter #2 is zero length. Please debug..."
            exit 1
        else
            if [ -z "$3" ] ; then
                echo "WriteLog: Message parameter #3 is zero length. Please debug..."
                exit 1
            fi
        fi
    fi
    Now=$(date '+%Y-%m-%d %H:%M:%S,%3N')
    FullScriptName="${BASH_SOURCE[0]}"
    ScriptName=$(basename "$FullScriptName")
    if [ "$1" = "Verbose" -a $Verbose = 1 ] ; then
        echo "$Now: $ScriptName: $2: $3"
    elif [ "$1" = "Verbose" -a $Verbose = 0 ] ; then
        :
    elif [ "$1" = "Output" ] ; then
        echo "${Now}: $ScriptName: $2: $3"
    elif [ -f $1 ] ; then
        echo "${Now}: $ScriptName: $2: $3" >> $1
    fi
    if [ ! -z $LogLocal ] ; then
        echo "${Now}: $ScriptName: $2: $3" >> $LogLocal
    fi
}

CountUpdates () {
    if [[ -x "/usr/bin/yum" ]] ; then
        UpdateCount=$(/usr/bin/yum -d 0 check-update 2>/dev/null | echo $(($(wc -l)-1)))
        if [ $UpdateCount == -1 ]; then
            UpdateCount=0
        fi
    elif [[ -x "/usr/bin/zypper" ]] ; then
        UpdateCount=$(zypper list-updates | wc -l) 
        UpdateCount=$(expr $UpdateCount - 4)
	if (( $UpdateCount <= 0 )) ; then
	    UpdateCount=0
	fi
    elif [[ -x "/usr/bin/apt-get" ]] ; then
        UpdateCount=$(apt-get update > /dev/null; apt-get upgrade -u -s | grep -P "^Inst" | wc -l)
    fi
    echo "$UpdateCount"
    exit 0
}

ColorTest () {
    WriteLog Verbose Info "Executing colortest with pattern $Pattern"
    for code in {0..255}; do echo -n -e "\e[38;05;${code}m $Pattern" ; done
    echo -e "\e[0;37m"
}

GatherInfo () {
    OsVersion="$(cat /etc/*release | head -n 1)"
    if [[ "$OsVersion" == "SUSE"* ]] ; then
        OsVersion="$(echo $OsVersion | sed 's/ (.*//')"
        PatchLevel="$(cat /etc/*release | sed -n 3p | sed 's/.*= //')"
        OsVersion="${OsVersion}.$PatchLevel"
    elif [[ "$OsVersion" == "openSUSE"* ]] ; then
        OsVersion="$(cat /etc/os-release | sed -n 4p | sed 's/PRETTY_NAME="//' | sed 's/ (.*//')"
    elif [[ "$OsVersion" == *"Raspbian"* ]] ; then
        OsVersion="$(cat /etc/*release | head -n 1 | sed 's/.*"\(.*\)"[^"]*$/\1/')"
    elif [[ "$OsVersion" == *"PRETTY_NAME"* ]] ; then
        OsVersion="$(cat /etc/*release | head -n 1 | cut -f2 -d'"')"
    fi
    IpPath="$(which ip 2>/dev/null)"
    IpAddress="$(${IpPath} route get 8.8.8.8 | head -1 | cut -d' ' -f8)"
    Kernel="$(uname -rs)"
    UptimeDays=$(awk '{print int($1/86400)}' /proc/uptime)
    UptimeHours=$(awk '{print int($1%86400/3600)}' /proc/uptime)
    UptimeMinutes=$(awk '{print int(($1%3600)/60)}' /proc/uptime)
    UptimeSeconds=$(awk '{print int($1%60)}' /proc/uptime)
    Dmi="$(dmesg | grep "DMI:")"
    if [[ "$Dmi" = *"QEMU"* ]] ; then
        Platform="$(dmesg | grep "DMI:" | sed 's/^.*QEMU/QEMU/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"VMware"* ]] ; then
        Platform="$(dmesg | grep "DMI:" | sed 's/^.*VMware/VMware/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"FUJITSU PRIMERGY"* ]] ; then
        Platform="$(dmesg | grep "DMI:" | sed 's/^.*FUJITSU PRIMERGY/Fujitsu Primergy/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"VirtualBox"* ]] ; then
        Platform="$(dmesg | grep "DMI:" | sed 's/^.*VirtualBox/VirtualBox/' | sed 's/ .*//')"
    else
        Dmi="$(dmesg | grep "Rasp")"
        if [[ "$Dmi" = *"Rasp"* ]] ; then
            Platform="$(dmesg | grep "Rasp" | sed 's/.*: //')"
        else
            Platform="$(dmesg | grep "DMI" | sed -n -e 's/^.*DMI: //p')"
        fi
    fi
    CpuUtil="$(LANG=en_GB.UTF-8 mpstat 1 1 | awk '$2 ~ /CPU/ { for(i=1;i<=NF;i++) { if ($i ~ /%idle/) field=i } } $2 ~ /all/ { print 100 - $field}' | tail -1)"
    CpuProc="$(cat /proc/cpuinfo | grep processor | wc -l)"
    CpuLoad="$(uptime | grep -ohe '[s:][: ].*' | awk '{ print "1m: "$2 " 5m: "$3 " 15m: " $4}')"
    MemFreeB="$(cat /proc/meminfo | grep MemFree | awk {'print $2'})"
    MemTotalB="$(cat /proc/meminfo | grep MemTotal | awk {'print $2'})"
    MemUsedB="$(expr $MemTotalB - $MemFreeB)"
    MemFree="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$MemFreeB/1024/1024))"
    WriteLog Verbose Info "MemFree: $MemFree"
    MemUsed="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$MemUsedB/1024/1024))"
    WriteLog Verbose Info "MemUsed: $MemUsed"
    MemTotal="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$MemTotalB/1024/1024))"
    WriteLog Verbose Info "MemTotal: $MemTotal"
    MemFreePerc=$(echo "scale=2; $MemFree*100/$MemTotal" | bc)
    MemFreePerc=$(echo $(LC_NUMERIC=C printf "%.0f" $MemFreePerc))
    WriteLog Verbose Info "MemFreePerc: $MemFreePerc"
    MemUsedPerc=$(echo "100-$MemFreePerc" | bc)
    WriteLog Verbose Info "MemUsedPerc: $MemUsedPerc"
    SwapFreeB="$(cat /proc/meminfo | grep SwapFree | awk {'print $2'})"
    SwapTotalB="$(cat /proc/meminfo | grep SwapTotal | awk {'print $2'})"
    SwapUsedB="$(expr $SwapTotalB - $SwapFreeB)"
    SwapFree="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$SwapFreeB/1024/1024))"
    SwapFreePerc=$(echo "scale=2; $SwapFreeB*100/$SwapTotalB" | bc)
    SwapFreePerc=$(echo $(LC_NUMERIC=C printf "%.0f" $SwapFreePerc))
    SwapUsed="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$SwapUsedB/1024/1024))"
    SwapUsedPerc=$(echo "100-$SwapFreePerc" | bc)
    SwapTotal="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$SwapTotalB/1024/1024))"
    RootFreeB="$(df -kP / | tail -1 | awk '{print $4}')"
    RootUsedB="$(df -kP / | tail -1 | awk '{print $3}')"
    RootTotalB="$(df -kP / | tail -1 | awk '{print $2}')"
    RootFree="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$RootFreeB/1024/1024))"
    RootUsed="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$RootUsedB/1024/1024))"
    RootTotal="$(printf "%0.2f\n" $(bc -q <<< scale=2\;$RootTotalB/1024/1024))"
    RootUsedPerc="$(df -kP / | tail -1 | awk '{print $5}'| sed s'/%$//')"
    RootFreePerc="$(expr 100 - $RootUsedPerc)" 
    UpdateCount="$(cat $UpdateFile)"
    SessionCount="$(who | grep $USER | wc -l)"
    ProcessCount="$(ps -Afl | wc -l)"
    ProcessMax="$(ulimit -u)"
    PhpVersion="$(/usr/bin/php -v 2>/dev/null | grep -oE '^PHP\s[0-9]+\.[0-9]+\.[0-9]+' | awk '{ print $2}')"
    MaxLeftOverChars=35
    Hostname="$(hostname)"
    HostChars=$((${#Hostname} + 8))
    LeftoverChars=$((MaxLeftOverChars - HostCHars -10))
    if [[ -x "/usr/bin/yum" ]] ; then
        UpdateType="yum"
    elif [[ -x "/usr/bin/zypper" ]] ; then
        UpdateType="zypper"
    elif [[ -x "/usr/bin/apt-get" ]] ; then
        UpdateType="apt-get"
    fi   
    WriteLog Verbose Info "UpdateType: $UpdateType"
    HttpdPath="$(which httpd 2>/dev/null)"
    WriteLog Verbose Info "HttpdPath: $HttpdPath"
    if [[ ! -z $HttpdPath ]] ; then
        HttpdVersion="$(${HttpdPath} -v | grep "Server version" | sed -e 's/.*[^0-9]\([0-9].[0-9]\+.[0-9]\+\)[^0-9]*$/\1/')"
        WriteLog Verbose Info "HttpdVersion: $HttpdVersion"
    fi
    case $UpdateType in
        "yum" )
            MariadbVersion="$(rpm -qa | grep mariadb-server | sed 's/.*-\(\([0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\)\).*/\1/')"
            WriteLog Verbose Info "MariadbVersion: $MariadbVersion" ;;
        *) WriteLog Verbose Info "$UpdateType not yet supported." ;;
    esac
}

StartBlueTheme () {
    # Blue
    Sch1="\e[0;34m####"
    # Light Blue
    Sch2="\e[1;34m#####"
    # Light Cyan
    Sch3="\e[1;36m#####"
    # Cyan
    Sch4="\e[0;36m#####"
    # Pre-Host Scheme
    PrHS=$Sch1$Sch1$Sch2$Sch2
    # Host Scheme Top
    HST="\e[1;36m`head -c $HostChars /dev/zero|tr '\0' '#'`"
    # Host Scheme Top Filler
    HSF="\e[1;36m###"
    # Host Scheme Bot
    HSB="\e[1;34m`head -c $HostChars /dev/zero|tr '\0' '#'`"
    # Post Host Scheme
    PHS="\e[1;34m`head -c $LeftoverChars /dev/zero|tr '\0' '#'`"
    # Host Version Filler
    HVF="\e[1;34m`head -c 9 /dev/zero|tr '\0' '#'`"
    # Front Scheme
    FrS="\e[0;34m##"
    # Equal Scheme
    ES="\e[1;34m="
    # 16 Color Green Value Scheme
    # Host Color
    HC="\e[1;32m"
    # Green Value Color
    VC="\e[0;32m"
    # Light Green Value Color
    VCL="\e[1;32m"
    # Light Yellow Key Color
    KS="\e[1;33m"
    # Version Color
    SVC="\e[1;36m"
}

StartRedTheme () {
    # Red
    Sch1="\e[0;31m####"
    # Light Red
    Sch2="\e[1;31m#####"
    # Light Yellow
    Sch3="\e[1;33m#####"
    # Yellow
    Sch4="\e[0;33m#####"
    # Pre-Host Scheme
    PrHS=$Sch1$Sch1$Sch2$Sch2
    # Host Scheme Top
    HST="\e[1;33m`head -c $HostChars /dev/zero|tr '\0' '#'`"
    # Host Scheme Top Filler
    HSF="\e[1;33m###"
    # Host Scheme Bot
    HSB="\e[0;31m`head -c $HostChars /dev/zero|tr '\0' '#'`"
    # Post Host Scheme
    PHS="\e[2;31m`head -c $LeftoverChars /dev/zero|tr '\0' '#'`"
    # Host Version Filler
    HVF="\e[2;31m`head -c 9 /dev/zero|tr '\0' '#'`"
    # Front Scheme
    FrS="\e[0;31m##"
    # Equal Scheme
    ES="\e[1;31m="
    # 16 Color Yellow Value Scheme
    # Host Color
    HC="\e[1;37m"
    # Yellow Value Color
    VC="\e[0;33m"
    # Light Yellow Value Color
    VCL="\e[1;33m"
    # Light Yellow Key Color
    KS="\e[0;37m"
    # Version Color
    SVC="\e[1;33m"
}

StartOriginalBlue () {
    for i in {18..21} {21..18} ; do ShortBlueScheme+="\e[38;5;${i}m#\e[0m"  ; done ;
    for i in {17..21} {21..17} ; do BlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m"  ; done ;
    for i in {17..21} {21..17} ; do LongBlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m\e[38;5;${i}m#"  ; done ;
}

GenerateOriginal256Color () {
    Space=""
    if [[ "$Theme" == "Modern" ]] ; then
        Space="                              "
        Fto="  "
    else
        Fto="##"
    fi
    echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme
$BlueScheme \e[38;5;93m $Hostname $BlueScheme $Space\e[38;5;98m$ScriptVersion
$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme
\e[0;38;5;17m$Fto          \e[38;5;39mIp \e[38;5;93m= \e[38;5;33m$IpAddress
\e[0;38;5;17m$Fto     \e[38;5;39mRelease \e[38;5;93m= \e[38;5;27m$OsVersion
\e[0;38;5;17m$Fto      \e[38;5;39mKernel \e[38;5;93m= \e[38;5;27m$Kernel
\e[0;38;5;17m$Fto    \e[38;5;39mPlatform \e[38;5;93m= \e[38;5;27m$Platform
\e[0;38;5;17m$Fto      \e[38;5;39mUptime \e[38;5;93m= \e[38;5;33m${UptimeDays} \e[38;5;27mday(s). \e[38;5;33m${UptimeHours}\e[38;5;27m:\e[38;5;33m${UptimeMinutes}\e[38;5;27m:\e[38;5;33m${UptimeSeconds}
\e[0;38;5;17m$Fto   \e[38;5;39mCPU Usage \e[38;5;93m= \e[38;5;33m${CpuUtil}\e[38;5;27m% average CPU usage over \e[38;5;33m$CpuProc \e[38;5;27mcore(s)
\e[0;38;5;17m$Fto    \e[38;5;39mCPU Load \e[38;5;93m= \e[38;5;27m$CpuLoad
\e[0;38;5;17m$Fto      \e[38;5;39mMemory \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${MemFree}\e[38;5;27mGB (\e[38;5;33m$MemFreePerc\e[38;5;27m%), Used: \e[38;5;33m${MemUsed}\e[38;5;27mGB (\e[38;5;33m$MemUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${MemTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto        \e[38;5;39mSwap \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${SwapFree}\e[38;5;27mGB (\e[38;5;33m$SwapFreePerc\e[38;5;27m%), Used: \e[38;5;33m${SwapUsed}\e[38;5;27mGB (\e[38;5;33m$SwapUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${SwapTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto        \e[38;5;39mRoot \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${RootFree}\e[38;5;27mGB (\e[38;5;33m$RootFreePerc\e[38;5;27m%), Used: \e[38;5;33m${RootUsed}\e[38;5;27mGB (\e[38;5;33m$RootUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${RootTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto     \e[38;5;39mUpdates \e[38;5;93m= \e[38;5;33m$UpdateCount\e[38;5;27m ${UpdateType} updates available
\e[0;38;5;17m$Fto    \e[38;5;39mSessions \e[38;5;93m= \e[38;5;33m$SessionCount\e[38;5;27m sessions
\e[0;38;5;17m$Fto   \e[38;5;39mProcesses \e[38;5;93m= \e[38;5;33m$ProcessCount\e[38;5;27m running processes of \e[38;5;33m$ProcessMax\e[38;5;27m maximum processes"
    if [[ $PhpVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "\e[0;38;5;17m$Fto         \e[38;5;39mPHP \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$PhpVersion"
    fi
    if [[ $HttpdVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mApache \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$HttpdVersion"
    fi
    if [[ $MariadbVersion =~ ^[0-9.-]+$ ]] ; then
        echo -e "\e[0;38;5;17m$Fto     \e[38;5;39mMariaDB \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$MariadbVersion"
    fi
    echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme\e[0;37m"
}

GenerateBasic16Color () {
    echo -e "$PrHS$Sch2$HST$Sch2$PHS$Sch1
$PrHS$Sch3$HSF $HC$Hostname $HSF$Sch3$HSF$HVF$SVC$ScriptVersion$Sch1
$PrHS$Sch2$HST$Sch2$PHS$Sch1
$FrS          ${KS}Ip $ES ${VCL}$IpAddress
$FrS     ${KS}Release $ES ${VC}$OsVersion
$FrS      ${KS}Kernel $ES ${VC}$Kernel
$FrS    ${KS}Platform $ES ${VC}$Platform
$FrS      ${KS}Uptime $ES ${VCL}${UptimeDays} ${VC}day(s). ${VCL}${UptimeHours}${VC}:${VCL}${UptimeMinutes}${VC}:${VCL}${UptimeSeconds}
$FrS   ${KS}CPU Usage $ES ${VCL}$CpuUtil ${VC}% average CPU usage over ${VCL}${CpuProc}${VC} core(s)
$FrS    ${KS}CPU Load $ES ${VC}$CpuLoad
$FrS      ${KS}Memory $ES ${VC}Free: ${VCL}${MemFree}${VC} GB (${VCL}$MemFreePerc${VC}%), Used: ${VCL}${MemUsed}${VC} GB (${VCL}$MemUsedPerc${VC}%), Total: ${VCL}${MemTotal}${VC} GB
$FrS        ${KS}Swap $ES ${VC}Free: ${VCL}${SwapFree}${VC} GB (${VCL}$SwapFreePerc${VC}%), Used: ${VCL}${SwapUsed}${VC} GB (${VCL}$SwapUsedPerc${VC}%), Total: ${VCL}${SwapTotal}${VC} GB
$FrS        ${KS}Root $ES ${VC}Free: ${VCL}${RootFree}${VC} GB (${VCL}$RootFreePerc${VC}%), Used: ${VCL}${RootUsed}${VC} GB (${VCL}$RootUsedPerc${VC}%), Total: ${VCL}${RootTotal}${VC} GB
$FrS     ${KS}Updates $ES ${VCL}$UpdateCount${VC} ${UpdateType} updates available.
$FrS    ${KS}Sessions $ES ${VCL}$SessionCount ${VC}sessions
$FrS   ${KS}Processes $ES ${VCL}$ProcessCount ${VC}running processes of ${VCL}$ProcessMax ${VC}maximum processes"
    if [[ $PhpVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "$FrS    ${KS}PHP Info $ES ${VC}Version: ${VCL}$PhpVersion"
    fi
    if [[ $HttpdVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "$FrS${KS} Apache Info $ES ${VC}Version: ${VCL}$HttpdVersion"
    fi
    echo -e "$PrHS$Sch2$HSB$Sch2$PHS$Sch1\e[0;37m"
}

GenerateHtmlTheme () {
#     echo -e "<!doctype html><html lang="en"><head><meta charset="utf-8"><title>FireMotD</title><meta name="description" content="Generates a HTML MotD message"><meta name="author" content="OutsideIT"><link rel="stylesheet" href="css/styles.css?v=1.0"></head><body><script src="js/scripts.js"></script><p>test</p><table><thead><tr><th>Hostname</th><th>Head2</th></tr></thead><tbody><tr><td>Bla</td><td>Bla</td></tr></tbody><tfoot><tr><td></td></tr></tfoot></table></body></html>"
# TODO => Put all html into variable and ouput at end. Integrate CSS.
HtmlCode='<!doctype html><html lang="en"><head><meta charset="utf-8"><title>FireMotD</title><meta name="description" content="Generates a HTML MotD message"><meta name="author" content="OutsideIT"><style type="text/css">'
HtmlCode+="h1 {
	font-family: Verdana;
	font-weight: normal;
	color: #024457;
	font-weight: bold;
        padding-left:30px;
}
table a:link {
	color: #666;
	font-weight: bold;
	text-decoration:none;
}
table a:visited {
	color: #999999;
	font-weight:bold;
	text-decoration:none;
}
table a:active,
table a:hover {
	color: #bd5a35;
	text-decoration:underline;
}
table {
	font-family:Arial, Helvetica, sans-serif;
	color:#666;
	font-size:12px;
	text-shadow: 1px 1px 0px #fff;
	background:#eaebec;
	margin:35px;
	width:80%;
	height:100%
	border:#ccc 3px solid;
 	-moz-border-radius:3px;
	-webkit-border-radius:3px;
	border-radius:3px;
	-moz-box-shadow: 0 1px 2px #d1d1d1;
	-webkit-box-shadow: 0 1px 2px #d1d1d1;
	box-shadow: 0 1px 2px #d1d1d1;
}
table th {
	padding:12px 25px 12px 25px;
	border-top:2px solid #fafafa;
	border-bottom:2px solid #e0e0e0;
	font-size:22px;
        font-weight:bold;
	background: #ededed;
	background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));
	background: -moz-linear-gradient(top,  #ededed,  #ebebeb);
}
table th:first-child {
	text-align: left;
	padding-left:20px;
}
table tr:first-child th:first-child {
	-moz-border-radius-topleft:3px;
	-webkit-border-top-left-radius:3px;
	border-top-left-radius:3px;
}
table tr:first-child th:last-child {
	-moz-border-radius-topright:3px;
	-webkit-border-top-right-radius:3px;
	border-top-right-radius:3px;
}
table tr {
	text-align: left;
	padding-left: 20px;
}
table td:first-child {
	text-align: left;
	padding-left:20px;
	border-left: 0;
}
table td {
	padding: 8px;
	border-top: 1px solid #ffffff;
	border-bottom: 1px solid #e0e0e0;
	border-left: 2px solid #e0e0e0;

	background: #fafafa;
	background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
	background: -moz-linear-gradient(top,  #fbfbfb,  #fafafa);
}
table tr.even td {
	background: #f6f6f6;
	background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
	background: -moz-linear-gradient(top,  #f8f8f8,  #f6f6f6);
}
table tr:last-child td {
	border-bottom:0;
}
table tr:last-child td:first-child {
	-moz-border-radius-bottomleft:3px;
	-webkit-border-bottom-left-radius:3px;
	border-bottom-left-radius:3px;
}
table tr:last-child td:last-child {
	-moz-border-radius-bottomright:3px;
	-webkit-border-bottom-right-radius:3px;
	border-bottom-right-radius:3px;
}
table tr:hover td {
	background: #f2f2f2;
	background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#f0f0f0));
	background: -moz-linear-gradient(top,  #f2f2f2,  #f0f0f0);	
}
.strong {
   	font-weight: bold; 
}
.em {
	font-style: italic; 
}
.right {
	text-align: right;
}
"
    HtmlCode+="</style></head>"
    HtmlCode+="<body><script src=\"js/scripts.js\"></script><h1>System Overview - $Hostname</h1>"
    HtmlCode+="<table><thead><th>$Hostname</th><th class=\"right\">$ScriptVersion</th></thead>"
    HtmlCode+="<tr><td>Ip</td><td>$IpAddress</td></tr>"
    HtmlCode+="<tbody><tr><td>Operating System</td><td>$OsVersion</td></tr>"
    HtmlCode+="<tr><td>Kernel</td><td>$Kernel</td></tr>"
    HtmlCode+="<tr><td>Platform</td><td>$Platform</td></tr>"
    HtmlCode+="<tr><td>Uptime</td><td>${UptimeDays} day(s). ${UptimeHours}:${UptimeMinutes}:${UptimeSeconds}</td></tr>"
    HtmlCode+="</tbody></table></body></html>"
    echo $HtmlCode
}

PrintHelp () {
    PrintVersion
    bn=$(basename $0)
    echo "
Usage: 
 $bn [-v] -t <theme name> 
 $bn [-v] -C ['string']
 $bn [-vUhVs]

Options:
 -h | --help               Shows this help and exits
 -v | --verbose            Verbose mode (shows messages)
 -V | --version            Shows version information and exits
 -t | --theme themeName    Shows Motd info on screen, based on the chosen theme
 -C | --colortest [string] Prints color test to screen using the provided string,
                           or the default string 'FireMotD' if none provided.
 -U | --updates            Checks for system updates and prints count to stdout
 -s | --saveupdates        Checks for system updates and saves count to disk
                           same as [ $bn -U > $UpdateFile ]

Available Themes:
 -t original
 -t modern
 -t red
 -t blue
 -t html
 -t blank

Examples:
 $0 -t original
 $0 --theme Modern
 $0 --colortest '###'
 $0 --saveupdates

Note:
 Some functionalities may require superuser priviledges. Eg. check for updates.
 Please try doing sudo $0 if you have problems.
"
    exit 0
}

PrintVersion () {
    cVersion="$(echo -e "${ScriptVersion}" | tr -d '[[:space:]]')"
    echo "$(basename $0) v$cVersion"
    return 0
}

CheckSudo () {
    if [ "$EUID" -ne 0 ]; then 
        echo "Update check requires root privileges"
        echo "Example:"
        echo "    sudo $0 $1"
        exit 1
    fi
    return 0
}

if [[ -z $1 ]]; then
        echo "Error! You should provide an option / parameter."
        echo "Try:"
        echo "    $0 --help"
        exit 2
fi

while :; do
    case "$1" in
        -v|--verbose|--Verbose)
            Verbose=1 ; WriteLog Verbose Info "Verbose execution." ; shift ;;
        -V|--version|--Version)
            PrintVersion ; exit 0 ;;
        -h|--help|--Help)
            PrintHelp ; exit 0 ;;
        yum|YUM|Yum|Zypper|zypper|-U|--Updates|--updates|-Y)
            CheckSudo $@ ; CountUpdates ; shift ;;
        -s|--saveupdates|--SaveUpdates|--saveUpdates)
            CheckSudo $@ ; CountUpdates > "$UpdateFile" ; chmod 644 "$UpdateFile" ; shift ;;
        -t|--Theme|--theme)
            shift ; Theme=$1 
            case "$Theme" in
                original|Original) GatherInfo ; StartOriginalBlue ; GenerateOriginal256Color ;;
                modern|Modern) GatherInfo ; GenerateOriginal256Color ;;
                red|Red) GatherInfo ; StartRedTheme ; GenerateBasic16Color ;;
                blue|Blue) GatherInfo ; StartBlueTheme ; GenerateBasic16Color ;;
                html|Html) GatherInfo ; GenerateHtmlTheme ;;
                blank|Blank|blanco|Blanco|Text|Clean|clean) GatherInfo ; GenerateBasic16Color ;;
                *) echo "You specified a non-existant theme: $1" ; exit 2 ;;
            esac
            shift ;;
        -C|--Colortest|--colortest) shift ; [[ -z $1 ]] && Pattern='FireMotD' || Pattern=$1 ; WriteLog Verbose Info "ColorTest with pattern $Pattern" ; ColorTest ; shift ;;
        -*) echo "You specified a non-existant option: $1" ; exit 2 ;;
        *) break ;;
    esac
done

exit 0
