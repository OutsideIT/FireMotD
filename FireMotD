#!/bin/bash
# Script name:  FireMotD
# Version:      v12.05.191019
# Created on:   10/02/2014
# Author:       Willem D'Haese
# Purpose:      Bash script which enables dynamic MotD messages
# On GitHub:    https://github.com/OutsideIT/FireMotD
# On OutsideIT: https://outsideit.net/FireMotD
# Copyright:
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version. This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details. You should have received a copy of the
# GNU General Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

Debug=0
Verbose=0
HideVersion=0
SkipRepoUpdate=0
LogLocal=''
ExportFile='/usr/share/firemotd/data/FireMotD.json'
TemplateType='default'
ScriptPath="$(readlink -f "$0")"
ScriptName="$(basename "$ScriptPath")"
ScriptVersion=" $(< "$ScriptPath" grep "# Version: " | head -n1 | awk '{print $3}' | tr -cd '[:digit:.-]' | sed 's/.\{0\}$//') "
LC_ALL="C"
LC_CTYPE="C"
LC_NUMERIC="C"
LANG="C"
RenderTime="cache"

WriteLog () {
  if [ -n "$ScriptName" ] ; then
    ScriptName="$(basename "$(readlink -f "$0")")"
  fi
  if [ -z "$1" ] ; then
    echo "WriteLog: Log parameter #1 is zero length. Please debug..."
    exit 1
  else
    if [ -z "$2" ] ; then
      echo "WriteLog: Severity parameter #2 is zero length. Please debug..."
      exit 1
    else
      if [ -z "$3" ] ; then
        echo "WriteLog: Message parameter #3 is zero length. Please debug..."
        exit 1
      fi
    fi
  fi
  Now=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  if [[ "$1" =~ (Debug|Verbose) ]] && [ "$Debug" = 1 ] ; then
    echo "$Now: $ScriptName: $2: $3 "
  elif [ "$1" = "Verbose" ] && [ "$Verbose" = 1 ] ; then
    echo "$Now: $ScriptName: $2: $3"
  elif [ "$1" = "Output" ] ; then
    echo "${Now}: $ScriptName: $2: $3"
  elif [ -f "$1" ] ; then
    echo "${Now}: $ScriptName: $2: $3" >> "$1"
  fi
  if [ -n "$LogLocal" ] ; then
    if [ "$1" = "Debug" ] && [ "$Debug" = 1 ] ; then
      echo "$Now: $ScriptName: $2: $3 " >> "$LogLocal"
    elif [ "$1" = "Verbose" ] && [ "$Verbose" = 1 ] ; then
      echo "$Now: $ScriptName: $2: $3" >> "$LogLocal"
    elif [ "$1" = "Output" ] ; then
      echo "${Now}: $ScriptName: $2: $3" >> "$LogLocal"
    fi
  fi
}

ColorTest () {
    ColorMap=1; [[ (-n $1) && ($1 -eq 0) ]] && ColorMap=0
    echo -n -e "\n\e[1mYour terminal \e[4mdoes not\e[24m support 256 colors if:\e[0m\n"
    echo " * The Color Cube colors are the same as System Colors"
    echo " * Your gray scale ramp has only 3 variations"
    echo -n -e "\nSystem colors:\n"
    for code in {0..15}; do
        ds="  "
        if [[ $ColorMap -eq 0 ]]; then
            [[ $code -lt 10 ]] && ds=" $code  " || ds=" $code "
        fi
        echo -n -e "\e[48;05;${code}m${ds}"
        [[ ($code -eq 7) || ($code -eq 15) ]] && echo -n -e "\e[0m\n"
    done
    tcolor=255
    echo -n -e "\nColor cube, 6x6x6:\n"
    for green in {0..5}; do
        for red in {0..5}; do
            for blue in {0..5}; do
                color=$((16 + (red * 36) + (green * 6) + blue));
                ds="  "
                if [[ $ColorMap -eq 0 ]]; then
                    [[ $color -lt 100 ]] && ds="$color  " || ds="$color "
                fi
                echo -n -e "\e[38;05;${tcolor}m\e[48;05;${color}m${ds}"
            done
            echo -n -e "\e[0m "
        done
        echo -n -e "\e[0m\n"
        tcolor=0
    done
    tcolor=255
    echo -n -e "\nGrayscale ramp:\n"
    for gray in {232..255}; do
        [[ $gray -gt 245 ]] && tcolor=0
        ds="  "
        [[ $ColorMap -eq 0 ]] && ds=" $gray "
        echo -n -e "\e[38;05;${tcolor}m\e[48;05;${gray}m${ds}"
    done
    echo -e "\e[0;37m\e[0m\n"
}

ContainsValidIp () {
    WriteLog Verbose Info "Checking if $1 contains an ip"
    local  ip=$1
    local  stat=1
    Extract=$(echo "$ip" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
    WriteLog Verbose Info "Extract: $Extract"
    if [[ $Extract =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        Extract=($Extract)
        IFS=$OIFS
        [[ ${Extract[0]} -le 255 && ${Extract[1]} -le 255 && ${Extract[2]} -le 255 && ${Extract[3]} -le 255 ]]
        stat=$?
        WriteLog Verbose Info "Match result: $?"
    fi
    return $stat
}

VersionComparison () {
  if [[ "$2" == "UNKNOWN" ]]; then echo "unknown"; return 3; fi # https://github.com/OutsideIT/FireMotD/issues/154
  if [[ "$1" == "$2" ]] ; then
    echo "equal"
    return 0
  fi
  local IFS=.
  local i ver1=($1) ver2=($2)
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)) ; do
    ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++)) ; do
    if [[ -z ${ver2[i]} ]] ; then
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})) ; then
      echo "older"
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})) ; then
      echo "newer"
      return 2
    fi
  done
  echo "unknown"
  return 3
}

IsInstalled () {
  if [[ -x "/usr/bin/yum" ]] ; then
    YumExec=$(command -v yum 2>/dev/null)
    if $YumExec list installed "$@" >/dev/null 2>&1; then true ; else false ; fi
  elif [[ -x "/usr/bin/zypper" ]] ; then
    WriteLog Verbose Info "No install check for zypper available."
    true
  elif [[ -x "/usr/bin/apt-get" ]] ; then
    if dpkg-query -l "$@" >/dev/null 2>&1 ; then true ; else false ; fi
  fi
}

GetSessions () {
    WriteLog Verbose Info "Output who: $(who)"
    WriteLog Verbose Info "Output who: $(who | cut -d' ' -f1,14)"
    SessionCount="$(who | cut -d' ' -f1,12 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
    WriteLog Verbose Info "SessionCount 1: f1,12: $SessionCount"
    CleanSessionHost=$(echo "$SessionCount"  | cut -d, -f2 | cut -d@ -f2- | cut -d@ -f2- )
    WriteLog Verbose Info "CleanSessionhost: $CleanSessionHost"
    RegexHost="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.){6,}*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]){6,}$"
    if ! ContainsValidIp "$SessionCount" ; then
        WriteLog Verbose Info "SessionCount $SessionCount does not contain an ip address. "
        if ! [[ "$CleanSessionHost" =~ $RegexHost ]] ; then
            WriteLog Verbose Info "CleanSessionHost $CleanSessionHost does not contain a hostname. "
            SessionCount="$(who | cut -d' ' -f1,13 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
            WriteLog Verbose Info "SessionCount 2: f1,13: $SessionCount"
            if ! ContainsValidIp "$SessionCount" && ! [[ "$CleanSessionHost" =~ $RegexHost ]] ; then
                SessionCount="$(who | cut -d' ' -f1,14 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
                WriteLog Verbose Info "SessionCount 3: f1,14: $SessionCount"
            fi
        else
            SessionCount="$(who | cut -d' ' -f1,12 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
            WriteLog Verbose Info "CleanSessionHost $CleanSessionHost contains a hostname. "
        fi
    else
        WriteLog Verbose Info "SessionCount $SessionCount contains an ip address. "
    fi
}

ExploreHostName () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  HostName="$(hostname)"
  tmp=$(mktemp)
  jq ".HostName.Value = \"$HostName\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".HostName.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreHostIp () {
    ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
    IpPath="$(command -v ip 2>/dev/null)"
    if [ -z "$IpPath" ] ; then
        if [ -f /usr/sbin/ip ] ; then
            IpPath="/usr/sbin/ip"
        elif [ -f /sbin/ip ] ; then
            IpPath="/sbin/ip"
        else
            WriteLog Verbose Warning "Path doesn't contain ip tool"
        fi
    fi
    if [[ -n $IpPath ]] ; then
        HostIp="$(${IpPath} route get 8.8.8.8 | head -1 | grep -Po '(?<=src )(\d{1,3}.){4}' | xargs)"
        if [[ ! $HostIp =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            HostIp="Unable to parse ip $HostIp. Please debug."
        fi
    else
        HostIp="Unable to use ip route. Please debug."
    fi
    if [ -f /sys/hypervisor/uuid ] && [ "$(head -c 3 /sys/hypervisor/uuid)" == ec2 ]; then
        CurlExec=$(command -v curl 2>/dev/null)
        WgetExec=$(command -v wget 2>/dev/null)
        if [[ (-f $CurlExec) && (-x $CurlExec) ]]; then
            HostIp=$($CurlExec -s http://instance-data/latest/meta-data/public-ipv4)
        elif [[ (-f $WgetExec) && (-x $WgetExec) ]]; then
            HostIp=$($WgetExec -qO- http://instance-data/latest/meta-data/public-ipv4)
        fi
    fi
    tmp=$(mktemp)
    jq ".HostIp.Value = \"$HostIp\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
    jq ".HostIp.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
    rm $tmp
}

ExploreRelease () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  ReleaseFull="$(cat /etc/*release)"
  Release="$(echo "$ReleaseFull" | head -n 1)"
  if echo "$ReleaseFull" | grep -E '(^CentOS*|^Red Hat*)' >/dev/null ; then
    Release="$(echo "$ReleaseFull" | tail -1)"
  elif echo "$ReleaseFull" | grep -E '(Debian)' >/dev/null ; then
    Release="$(echo "$ReleaseFull" | grep 'PRETTY_NAME' | cut -f2 -d'"')"
  elif [[ "$Release" == "SUSE"* ]] ; then
    Release=${Release%% \(*}
    PatchLevel="$(cat /etc/*release | sed -n 3p | sed 's/.*= //')"
    Release="${Release}.$PatchLevel"
  elif [[ "$Release" == "openSUSE"* ]] ; then
    Release="$(< /etc/os-release sed -n 4p | sed 's/PRETTY_NAME="//' | sed 's/ (.*//')"
  elif [[ "$Release" == *"Raspbian"* ]] ; then
    Release="$(echo "$ReleaseFull" | head -n 1 | sed 's/.*"\(.*\)"[^"]*$/\1/')"
  elif [[ "$ReleaseFull" == *"DISTRIB_DESCRIPTION"* ]] ; then
    Release="$(echo "$ReleaseFull" | grep 'DISTRIB_DESCRIPTION' | cut -f2 -d'"')"
  fi
  tmp=$(mktemp)
  jq ".Release.Value = \"$Release\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Release.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreKernel () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  Kernel="$(uname -rs)"
  tmp=$(mktemp)
  jq ".Kernel.Value = \"$Kernel\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Kernel.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExplorePlatform () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  Dmesg="$(dmesg 2>/dev/null)"
  Dmi="$(echo "$Dmesg" | grep "DMI:")"
  Rasp="$(echo "$Dmesg" | grep "Raspberry")"
  Xen="$(echo "$Dmesg" | grep -i 'xen version')"
  [[ -f "/proc/1/comm" ]] && InitSystem="$(cat /proc/1/comm)"
  if [[ "$Dmi" = *"QEMU"* ]] ; then
    Platform="$(echo "$Dmi" | sed 's/^.*QEMU/QEMU/' | sed 's/, B.*//')"
  elif [[ "$Dmi" = *"VMware"* ]] ; then
    Platform="$(echo "$Dmi" | sed 's/^.*VMware/VMware/' | sed 's/, B.*//')"
  elif [[ "$Dmi" = *"FUJITSU PRIMERGY"* ]] ; then
    Platform="$(echo "$Dmi" | sed 's/^.*FUJITSU PRIMERGY/Fujitsu Primergy/' | sed 's/, B.*//')"
  elif [[ "$Dmi" = *"HP"* ]] ; then
    Platform="$(echo "$Dmi" | sed 's/^.*Hewlett-Packard HP ProBook/HP Probook/' | sed 's/, B.*//')"
  elif [[ "$Dmi" = *"VirtualBox"* ]] ; then
    Platform="$(echo "$Dmi" | sed 's/^.*VirtualBox/VirtualBox/' | sed 's/ .*//')"
  elif [[ "$Dmi" = *"DMI:"* ]] ; then
    Platform="$(echo "$Dmi" | sed -n -e 's/^.*DMI: //p')"
  elif [[ "$Dmi" = *"klogctl"* ]] ; then
    Platform="Windows Subsytem for Linux"
  elif [[ "$Xen" = *"Xen version"* ]] ; then
    Platform="Xen Hypervisor v""$(echo "$Xen" | sed -n -e 's/^.*Xen version: //p')"
  elif [[ "$Rasp" = *"Rasp"* ]] ; then
    Platform=${Rasp//*: /}
  elif [[ $(uname -r) =~ pine64-longsleep ]] ; then
    Platform="Pine A64"
    _mem="$(< /proc/meminfo grep MemTotal | awk '{print $2}')"
    if [ "$_mem" -gt  500000 ] && [ "$_mem" -gt  503000 ]; then Platform="Pine A64 512MB Rev B Board"; fi
    if [ "$_mem" -gt 1000000 ] && [ "$_mem" -gt 1006000 ]; then Platform="Pine A64+ 1GB Rev B Board"; fi
    if [ "$_mem" -gt 2000000 ] && [ "$_mem" -gt 2012000 ]; then Platform="Pine A64+ 2GB Rev C Board"; fi
  elif [[ $(uname -r) =~ Microsoft ]] ; then
    Platform="Windows Subsystem for Linux"
  elif [[ "$InitSystem" == "systemd" ]] ; then
    Custom="$(systemd-detect-virt)"
    if [[ -n $Custom ]] ; then
      if [[ "$Custom" = *"openvz"* ]] ; then
        Platform="OpenVZ"
      elif [[ "$Custom" = *"vmware"* ]] ; then
        Platform="VMware Virtual Platform"
      else
        Platform=$Custom
      fi
    else
      Platform="Unknown"
    fi
  else
    Platform="Unknown"
  fi
  tmp=$(mktemp)
  jq ".Platform.Value = \"$Platform\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Platform.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreUptime () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  UptimeDays=$(awk '{print int($1/86400)}' /proc/uptime)
  UptimeHours=$(awk '{print int($1%86400/3600)}' /proc/uptime)
  UptimeMinutes=$(awk '{print int(($1%3600)/60)}' /proc/uptime)
  UptimeSeconds=$(awk '{print int($1%60)}' /proc/uptime)
  tmp=$(mktemp)
  jq ".Uptime.Days = \"$UptimeDays\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Uptime.Hours = \"$UptimeHours\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Uptime.Minutes = \"$UptimeMinutes\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Uptime.Seconds = \"$UptimeSeconds\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
#  jq --arg us "$UptimeSeconds" ".Uptime.Seconds = $us" < $ExportFile
#  UpdateUptimeLastRun=$(cat $ExportFile | jq ".Uptime.LastRun = [\"$ExportTime\"]")
  jq ".Uptime.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreInstallDate () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  RpmPath="$(command -v rpm 2>/dev/null)"
  if [[ (-f $RpmPath) && (-x $RpmPath) ]] ; then
    InstallDate=$(rpm -qi basesystem | grep "Install Date" | sed 's/Install Date: //g' | sed 's/Build Host: .*//g')
  fi
  tmp=$(mktemp)
  jq ".InstallDate.Value = \"$InstallDate\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".InstallDate.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreCpuUsage () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  CpuUsageAverage="$(LANG=en_GB.UTF-8 mpstat 1 1 | awk '$2 ~ /CPU/ { for(i=1;i<=NF;i++) { if ($i ~ /%idle/) field=i } } $2 ~ /all/ { print 100 - $field}' | tail -1)"
  CpuUsageCpuCount="$(< /proc/cpuinfo grep -c processor)"
  if [[ "$(jq -r ".Platform.Value" $ExportFile)" == "OpenVZ" ]] ; then
    CpuUsageSocketCount="$(< /proc/cpuinfo grep "physical id" | sort -u | wc -l)"
    CpuUsageCoreCount="$(< /proc/cpuinfo grep "processor" | sort -u | wc -l)"
  else
    CpuUsageSocketCount="$(lscpu | grep 'Socket(s):' | head -1 | awk -F " " '{print $2}')"
    CpuUsageCoreCount="$(lscpu | grep 'Core(s) per socket:' | head -1 | awk -F " " '{print $4}')"
  fi
  tmp=$(mktemp)
  jq ".CpuUsage.Average = \"$CpuUsageAverage\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".CpuUsage.CpuCount = \"$CpuUsageCpuCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".CpuUsage.CoreCount = \"$CpuUsageCoreCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".CpuUsage.SocketCount = \"$CpuUsageSocketCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".CpuUsage.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreCpuLoad () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  CpuLoad="$(uptime | grep -ohe '[s:][: ].*' | awk '{print "1m: "$2 " 5m: "$3 " 15m: " $4}')"
  tmp=$(mktemp)
  jq ".CpuLoad.Value = \"$CpuLoad\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".CpuLoad.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreMemory () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  MemTotalB="$(< /proc/meminfo grep MemTotal | awk '{print $2}')"
  MemTotalGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemTotalB"/1024/1024)")"
  ProcpsVersion="$(free -V | awk '{ print $4 }')"
  Result=$(VersionComparison 3.3.9 "$ProcpsVersion")
  if [[ $Result =~ (older|equal) ]] ; then
    MemFreeB="$(free | grep buffers/cache | awk '{print $4}')"
    MemUsedB="$(free | grep buffers/cache | awk '{print $3}')"
  else
    MemBuffCacheB="$(free | awk '/Mem:/ { print $6 }')"
    MemFreeUsedB="$(free | awk '/Mem:/ { print $3 }')"
    MemUsedB=$(echo "$MemBuffCacheB+$MemFreeUsedB" | bc)
    MemFreeB="$(free | awk '/Mem:/ { print $4 }')"
  fi
  MemFreeGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemFreeB"/1024/1024)")"
  MemUsedGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemUsedB"/1024/1024)")"
  MemFreePerc=$(echo "scale=2; $MemFreeB*100/$MemTotalB" | bc)
  MemFreePerc="$(LC_NUMERIC=C printf "%.0f" "$MemFreePerc")"
  MemUsedPerc=$(echo "100-$MemFreePerc" | bc)
  tmp=$(mktemp)
  jq ".Memory.TotalGB = \"$MemTotalGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Memory.FreeGB = \"$MemFreeGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Memory.UsedGB = \"$MemUsedGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Memory.FreePerc = \"$MemFreePerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Memory.UsedPerc = \"$MemUsedPerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Memory.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreSwap () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  SwapTotalB="$(< /proc/meminfo grep SwapTotal | awk '{print $2}')"
  SwapTotalGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$SwapTotalB"/1024/1024)")"
  SwapFreeB="$(< /proc/meminfo grep SwapFree | awk '{print $2}')"
  SwapFreeGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$SwapFreeB"/1024/1024)")"
  SwapUsedB="$((SwapTotalB - SwapFreeB))"
  SwapUsedGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;$SwapUsedB/1024/1024)")"
  SwapFreePerc=$(echo "scale=2; $SwapFreeB*100/$SwapTotalB" | bc  2> /dev/null)
  SwapFreePerc="$(LC_NUMERIC=C printf "%.0f" "$SwapFreePerc")"
  SwapUsedPerc=$(echo "100-$SwapFreePerc" | bc)
  tmp=$(mktemp)
  jq ".Swap.TotalGB = \"$SwapTotalGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Swap.FreeGB = \"$SwapFreeGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Swap.UsedGB = \"$SwapUsedGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Swap.FreePerc = \"$SwapFreePerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Swap.UsedPerc = \"$SwapUsedPerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Swap.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreDiskRoot () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  DiskRootTotalB="$(df -kP / | tail -1 | awk '{print $2}')"
  DiskRootTotalGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$DiskRootTotalB"/1024/1024)")"
  DiskRootFreeB="$(df -kP / | tail -1 | awk '{print $4}')"
  DiskRootFreeGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$DiskRootFreeB"/1024/1024)")"
  DiskRootUsedB="$(df -kP / | tail -1 | awk '{print $3}')"
  DiskRootUsedGB="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$DiskRootUsedB"/1024/1024)")"
  DiskRootUsedPerc="$(df -kP / | tail -1 | awk '{print $5}'| sed s'/%$//')"
  DiskRootFreePerc="$((100 - DiskRootUsedPerc))"
  tmp=$(mktemp)
  jq ".DiskRoot.TotalGB = \"$DiskRootTotalGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".DiskRoot.FreeGB = \"$DiskRootFreeGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".DiskRoot.UsedGB = \"$DiskRootUsedGB\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".DiskRoot.FreePerc = \"$DiskRootFreePerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".DiskRoot.UsedPerc = \"$DiskRootUsedPerc\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".DiskRoot.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreUpdates () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  if [[ -x "/usr/bin/yum" ]] ; then
    UpdateType="yum"
    YumExec=$(command -v yum 2>/dev/null)
    UpdateCount=$(($($YumExec -d 0 check-update 2>/dev/null | wc -l)-1))
    if [ $UpdateCount == -1 ]; then
       UpdateCount=0
    fi
  elif [[ -x "/usr/bin/zypper" ]] ; then
    UpdateType="zypper"
    UpdateCount=$(zypper list-updates | wc -l)
    UpdateCount=$((UpdateCount-4))
    if ((UpdateCount<=0)) ; then
      UpdateCount=0
    fi
  elif [[ -x "/usr/bin/apt-get" ]] ; then
    UpdateType="apt"
    if [[ "$SkipRepoUpdate" -eq 1 ]]; then
      UpdateCount=$(apt-get upgrade -u -s | grep -c -P "^Inst")
    else
      UpdateCount=$(apt-get update > /dev/null; apt-get upgrade -u -s | grep -c -P "^Inst")
    fi
  fi
  tmp=$(mktemp)
  jq ".Updates.Type = \"$UpdateType\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Updates.Count = \"$UpdateCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Updates.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreSessions () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  SessionCount="$(who | grep -c "$USER")"
  tmp=$(mktemp)
  jq ".Sessions.Count = \"$SessionCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Sessions.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreProcesses () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  ProcessCount="$(ps -A --no-headers | wc -l)"
  SysctlPath="$(command -v sysctl 2>/dev/null)"
  if [ -z "$SysctlPath" ] ; then
    if [ -f /usr/sbin/sysctl ] ; then
      SysctlPath="/usr/sbin/sysctl"
    elif [ -f /sbin/sysctl ] ; then
      SysctlPath="/sbin/sysctl"
    else
      WriteLog Verbose Warning "Path doesn't contain sysctl tool"
    fi
  fi
  ProcessMax="$($SysctlPath -n kernel.pid_max)"
  tmp=$(mktemp)
  jq ".Processes.Count = \"$ProcessCount\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Processes.Max = \"$ProcessMax\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Processes.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreHttpd () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  HttpdPath="$(command -v httpd 2>/dev/null)"
  [[ ! -f $HttpdPath ]] && HttpdPath="/usr/sbin/apache2ctl"
  [[ ! -f $HttpdPath ]] && HttpdPath="/usr/sbin/apache2"
  if [[ (-f $HttpdPath) && (-x $HttpdPath) ]] ; then
    HttpdVersion="$(${HttpdPath} -v 2>/dev/null | grep "Server version" | sed -e 's/.*[^0-9]\([0-9].[0-9]\+.[0-9]\+\)[^0-9]*$/\1/')"
  fi
  tmp=$(mktemp)
  jq ".Httpd.Version = \"$HttpdVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Httpd.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreNginx () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  NginxVersion=""
  NginxPath="$(command -v nginx 2>/dev/null)"
  if [[ (-f $NginxPath) && (-x $NginxPath) ]] ; then
    NginxString="$(${NginxPath} -v 2>&1)"
    NginxVersion="$(echo "$NginxString" | awk -F"/" '{print $2}')"
  fi
  tmp=$(mktemp)
  jq ".Nginx.Version = \"$NginxVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Nginx.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreMysql () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  MysqlVersion=""
  MysqlDistribution=""
  MysqlPath="$(command -v mysql 2>/dev/null)"
  if [[ (-f $MysqlPath) && (-x $MysqlPath) ]] ; then
    MysqlString="$(${MysqlPath} --version 2>/dev/null)"
    MysqlVersion="$(echo "$MysqlString" | awk '{print $3}')"
    MysqlDistribution="$(echo "$MysqlString" | awk '{print $5}' | tr -d ',')"
  fi
  tmp=$(mktemp)
  jq ".Mysql.Version = \"$MysqlVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Mysql.Distribution = \"$MysqlDistribution\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Mysql.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExplorePostgres () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  PostgresVersion=""
  PostgresPath="$(command -v psql 2>/dev/null)"
  if [[ (-f $PostgresPath) && (-x $PostgresPath) ]] ; then
    PostgresString="$(${PostgresPath} --version 2>/dev/null)"
    PostgresVersion="$(echo "$PostgresString"  | head -n1 | awk '{print $3}')"
  fi
  tmp=$(mktemp)
  jq ".Postgres.Version = \"$PostgresVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Postgres.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExplorePhp () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  PhpVersion="$(/usr/bin/php -v 2>/dev/null | grep -oE '^PHP\s[0-9]+\.[0-9]+\.[0-9]+' | awk '{ print $2}')"
  if [ -f /etc/php.ini ] ; then
    PhpIniPath="/etc/php.ini"
  elif [ -f /etc/php5/fpm/php.ini ] ; then
    PhpIniPath="/etc/php5/fpm/php.ini"
  fi
  if [ -n "$PhpIniPath" ] ; then
    PhpMaxMemory=$(tac $PhpIniPath | grep -F -m 1 memory_limit | sed -n 's/.* = \([0-9]*\)/\1/p' | sed 's/; .*//g')
    if [[ "$PhpMaxMemory" == "-1" ]]; then
      PhpMaxMemory="Unlimited"
    fi
  fi
  tmp=$(mktemp)
  jq ".Php.Version = \"$PhpVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Php.MaxMemory = \"$PhpMaxMemory\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Php.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreElasticsearch () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  if [[ -x "/usr/bin/yum" ]] ; then
    ElasticsearchVersion=$(/usr/bin/yum info -v elasticsearch 2>/dev/null | grep -A12 -B5 -w installed | grep Version | awk '{print $3}')
  else
    ElasticsearchVersion="Unknown"
  fi
  if [ -z $ElasticsearchVersion ] || [[ $ElasticsearchVersion == *"Error: No matching Packages"* ]] ; then
    ElasticsearchVersion="Unknown"
  fi
  tmp=$(mktemp)
  jq ".Elasticsearch.Version = \"$ElasticsearchVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Elasticsearch.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreLogstash () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  if [[ -x "/usr/bin/yum" ]] ; then
    LogstashVersion=$(/usr/bin/yum info -v logstash 2>/dev/null | grep -A12 -B5 -w installed | grep Version | awk '{print $3}')
  else
    LogstashVersion="Unknown"
  fi
  if [ -z $LogstashVersion ] || [[ $LogstashVersion == *"Error: No matching Packages"* ]] ; then
    LogstashVersion="Unknown"
  fi
  tmp=$(mktemp)
  jq ".Logstash.Version = \"$LogstashVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Logstash.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExploreKibana () {
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  if [[ -x "/usr/bin/yum" ]] ; then
    KibanaVersion=$(/usr/bin/yum info -v kibana 2>/dev/null | grep -A12 -B5 -w installed | grep Version | awk '{print $3}')
  else
    KibanaVersion="Unknown"
  fi
  if [ -z $KibanaVersion ] || [[ $KibanaVersion == *"Error: No matching Packages"* ]] ; then
    KibanaVersion="Unknown"
  fi
  tmp=$(mktemp)
  jq ".Kibana.Version = \"$KibanaVersion\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  jq ".Kibana.LastRun = \"$ExportTime\"" $ExportFile > "$tmp" && cp "$tmp" $ExportFile
  rm $tmp
}

ExportData () {
  if [ ! -d "/usr/share/firemotd/templates" ]; then
     WriteLog Output Error "Template folder doesn't exist. Upgrading from an older version? Please run make again or run the install function \"FireMotD -I -v\"."
     exit 2
  elif [[ -s "$ExportFile" ]] ; then
    WriteLog Debug Info "Exportfile $ExportFile found."
    if [[ "$TemplateType" != "default" ]] ; then
      if [[ -s "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" ]] ; then
        WriteLog Verbose Info "Template type set to ${TemplateType}. Overwriting.."
        cp "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" $ExportFile
      else
        WriteLog Output Error "Template ${TemplateType} does not exist. Try running the install function \"FireMotD -I -v\"."
        exit 2
      fi
    else
      if [[ ! -f "$ExportFile" ]] ; then
        TemplateType="basic"
        cp "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" $ExportFile
      fi
    fi
  else
    WriteLog Debug Info "Exportfile $ExportFile not found. "
    if [[ "$TemplateType" != "default" ]] ; then
      if [[ -s "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" ]] ; then
        WriteLog Verbose Info "Template type set to ${TemplateType}. Overwriting.."
        cp "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" $ExportFile
      else
        WriteLog Output Error "Template ${TemplateType} does not exist. Try running the install function \"FireMotD -I -
v\"."
        exit 2
      fi
    else
      if [[ ! -f "$ExportFile" ]] ; then
        TemplateType="basic"
        cp "/usr/share/firemotd/templates/FireMotD-template-${TemplateType}.json" $ExportFile
      fi
    fi
  fi
  ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
  while read -r val ; do
    WriteLog Debug Info "Exploring ${val}"
    "Explore${val}"
  done < <(jq -r 'to_entries[] | select(.value.Generated == "@cron") | .key' $ExportFile)
  WriteLog Verbose Info "Export system data to \"${ExportFile}\" finished."
  chmod 0766 ${ExportFile}
  LsExport=$(ls -la ${ExportFile})
  WriteLog Debug Info "ExportFile: $LsExport"
}

LoadData () {
  WriteLog Verbose Info "Logon data refresh start"
  if [[ -s "$ExportFile" ]] ; then
    i=0
    if [[ "$MultiThreaded" == "1" ]] ; then
      Procs=$(nproc --all)
      (( Procs++ ))
    fi
    while read -r val ; do
      if [[ "$MultiThreaded" == "1" ]] ; then
        WriteLog Verbose Info "Exploring ${val} in background job $i"
        "Explore${val}" &
        RunningJobs=$(jobs -r | wc -l | tr -d " ")
        WriteLog Verbose Info "$RunningJobs jobs running."
        while [ "$(jobs -r | wc -l | tr -d " ")" -gt "$Procs" ] ; do
          WriteLog Debug Info "More then $Procs jobs running. Waiting for completion"
          sleep 0.1
        done
        (( i++ ))
      else
         WriteLog Verbose Info "Exploring ${val}"
         "Explore${val}"
         if [[ $(id -u) == 0 ]] ; then
           chmod 0766 ${ExportFile}
         fi
         LsExport=$(ls -la ${ExportFile})
         WriteLog Debug Info "ExportFile: $LsExport"
      fi
    done < <(jq -r 'to_entries[] | select(.value.Generated == "@logon") | .key' $ExportFile)
    if [[ "$MultiThreaded" == "1" ]] ; then
      WriteLog Verbose Info "Waiting for all background explorers to finish"
      wait
    fi
  else
     WriteLog Output Info "No FireMotD ExportFile detected. Please generate with \"sudo .\/FireMotD -S\""
    exit 2
  fi
  WriteLog Verbose Info "Logon Data refresh for end"
}

StartOriginalBlue () {
  for i in {18..21} {21..18} ; do ShortBlueScheme+="\e[38;5;${i}m#\e[0m"  ; done ;
  for i in {17..21} {21..17} ; do BlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m"  ; done ;
  for i in {17..21} {21..17} ; do LongBlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m\e[38;5;${i}m#"  ; done ;
}

GenerateOriginal256Color () {
  WriteLog Verbose Info "Generating 256 color $Theme FireMotD"
  Space=""
  if [[ "$Theme" == "Modern" ]] ; then
    Space="                              "
    Fto="  "
  else
    Fto="##"
  fi
  ShownVersion=""
  if [[ "$HideVersion" -eq 1 ]]; then
    ShownVersion="$CP1$CP1$CP1$CP1$CP1$CP1"
  else
    ShownVersion="$ScriptVersion"
  fi
  HostName=$(jq -r ".HostName.Value" $ExportFile)
  if [[ "$HostName" != "null" ]] && [[ "$HostName" != "" ]] ; then
    echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme
$BlueScheme \e[38;5;93m $HostName $ShortBlueScheme $Space\e[38;5;98m$SVC$ShownVersion
$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme"
  fi
  HostIp=$(jq -r ".HostIp.Value" $ExportFile)
  if [[ -n $HostIp ]] && [[ "$HostIp" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto            \e[38;5;39mIp \e[38;5;93m= \e[38;5;33m$HostIp"
  fi
  Release=$(jq -r ".Release.Value" $ExportFile)
  if [[ -n $Release ]] && [[ "$Release" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto       \e[38;5;39mRelease \e[38;5;93m= \e[38;5;27m$Release"
  fi
  Kernel=$(jq -r ".Kernel.Value" $ExportFile)
  if [[ -n $Kernel ]] && [[ "$Kernel" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto        \e[38;5;39mKernel \e[38;5;93m= \e[38;5;27m$Kernel"
  fi
  Platform=$(jq -r ".Platform.Value" $ExportFile)
  if [[ -n $Platform ]] && [[ "$Platform" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mPlatform \e[38;5;93m= \e[38;5;27m$Platform"
  fi
  UptimeDays=$(jq -r ".Uptime.Days" $ExportFile)
  UptimeHours=$(jq -r ".Uptime.Hours" $ExportFile)
  UptimeMinutes=$(jq -r ".Uptime.Minutes" $ExportFile)
  UptimeSeconds=$(jq -r ".Uptime.Seconds" $ExportFile)
  if [[ -n $UptimeDays ]] && [[ "$UptimeDays" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto        \e[38;5;39mUptime \e[38;5;93m= \e[38;5;33m${UptimeDays} \e[38;5;27mday(s). \e[38;5;33m${UptimeHours}\e[38;5;27m:\e[38;5;33m${UptimeMinutes}\e[38;5;27m:\e[38;5;33m${UptimeSeconds}"
  fi
  InstallDate=$(jq -r ".InstallDate.Value" $ExportFile)
  if [[ -n $InstallDate ]] && [[ "$InstallDate" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto     \e[38;5;39mInstalled \e[38;5;93m= \e[38;5;27m$InstallDate"
  fi
  CpuUsageAverage=$(jq -r ".CpuUsage.Average" $ExportFile)
  CpuUsageCpuCount=$(jq -r ".CpuUsage.CpuCount" $ExportFile)
  CpuUsageCoreCount=$(jq -r ".CpuUsage.CoreCount" $ExportFile)
  CpuUsageSocketCount=$(jq -r ".CpuUsage.SocketCount" $ExportFile)
  if [[ -n $CpuUsageAverage ]] && [[ "$CpuUsageAverage" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto     \e[38;5;39mCPU Usage \e[38;5;93m= \e[38;5;33m${CpuUsageAverage}\e[38;5;27m% avg over \e[38;5;33m$CpuUsageCpuCount \e[38;5;27mcpu(s) ($CpuUsageCoreCount core(s) x $CpuUsageSocketCount socket(s))"
  fi
  CpuLoad=$(jq -r ".CpuLoad.Value" $ExportFile)
  if [[ -n $CpuLoad ]] && [[ "$CpuLoad" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mCPU Load \e[38;5;93m= \e[38;5;27m$CpuLoad"
  fi
  MemTotalGB=$(jq -r ".Memory.TotalGB" $ExportFile)
  MemFreeGB=$(jq -r ".Memory.FreeGB" $ExportFile)
  MemUsedGB=$(jq -r ".Memory.UsedGB" $ExportFile)
  MemFreePerc=$(jq -r ".Memory.FreePerc" $ExportFile)
  MemUsedPerc=$(jq -r ".Memory.UsedPerc" $ExportFile)
  if [[ -n $MemTotalGB ]] && [[ "$MemTotalGB" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto        \e[38;5;39mMemory \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${MemFreeGB}\e[38;5;27mGB (\e[38;5;33m${MemFreePerc}\e[38;5;27m%), Used: \e[38;5;33m${MemUsedGB}\e[38;5;27mGB (\e[38;5;33m${MemUsedPerc}\e[38;5;27m%), Total: \e[38;5;33m${MemTotalGB}\e[38;5;27mGB"
  fi
  SwapTotalGB=$(jq -r ".Swap.TotalGB" $ExportFile)
  SwapFreeGB=$(jq -r ".Swap.FreeGB" $ExportFile)
  SwapUsedGB=$(jq -r ".Swap.UsedGB" $ExportFile)
  SwapFreePerc=$(jq -r ".Swap.FreePerc" $ExportFile)
  SwapUsedPerc=$(jq -r ".Swap.UsedPerc" $ExportFile)
  if [[ -n $SwapTotalGB ]] && [[ "$SwapTotalGB" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto          \e[38;5;39mSwap \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${SwapFreeGB}\e[38;5;27mGB (\e[38;5;33m$SwapFreePerc\e[38;5;27m%), Used: \e[38;5;33m${SwapUsedGB}\e[38;5;27mGB (\e[38;5;33m$SwapUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${SwapTotalGB}\e[38;5;27mGB"
  fi
  DiskRootTotalGB=$(jq -r ".DiskRoot.TotalGB" $ExportFile)
  DiskRootFreeGB=$(jq -r ".DiskRoot.FreeGB" $ExportFile)
  DiskRootUsedGB=$(jq -r ".DiskRoot.UsedGB" $ExportFile)
  DiskRootFreePerc=$(jq -r ".DiskRoot.FreePerc" $ExportFile)
  DiskRootUsedPerc=$(jq -r ".DiskRoot.UsedPerc" $ExportFile)
  if [[ -n $DiskRootTotalGB ]] && [[ "$DiskRootTotalGB" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto          \e[38;5;39mRoot \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${DiskRootFreeGB}\e[38;5;27mGB (\e[38;5;33m$DiskRootFreePerc\e[38;5;27m%), Used: \e[38;5;33m${DiskRootUsedGB}\e[38;5;27mGB (\e[38;5;33m$DiskRootUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${DiskRootTotalGB}\e[38;5;27mGB"
  fi
  UpdateCount=$(jq -r ".Updates.Count" $ExportFile)
  UpdateType=$(jq -r ".Updates.Type" $ExportFile)
  if [[ -n $UpdateCount ]] && [[ "$UpdateCount" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto       \e[38;5;39mUpdates \e[38;5;93m= \e[38;5;33m$UpdateCount\e[38;5;27m ${UpdateType} updates available"
  fi
  SessionCount=$(jq -r ".Sessions.Count" $ExportFile)
  if [[ -n $SessionCount ]] && [[ "$SessionCount" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mSessions \e[38;5;93m= \e[38;5;33m$SessionCount\e[38;5;27m"
  fi
  ProcessCount=$(jq -r ".Processes.Count" $ExportFile)
  ProcessMax=$(jq -r ".Processes.Max" $ExportFile)
  if [[ -n $ProcessCount ]] && [[ "$ProcessCount" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto     \e[38;5;39mProcesses \e[38;5;93m= \e[38;5;33m$ProcessCount\e[38;5;27m running processes of \e[38;5;33m$ProcessMax\e[38;5;27m maximum processes"
  fi
  HttpdVersion=$(jq -r ".Httpd.Version" $ExportFile)
  if [[ -n $HttpdVersion ]] && [[ "$HttpdVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto        \e[38;5;39mApache \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$HttpdVersion"
  fi
  NginxVersion=$(jq -r ".Nginx.Version" $ExportFile)
  if [[ -n $NginxVersion ]] && [[ "$NginxVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto         \e[38;5;39mnginx \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$NginxVersion"
  fi
  MysqlVersion=$(jq -r ".Mysql.Version" $ExportFile)
  MysqlDistribution=$(jq -r ".Mysql.Distribution" $ExportFile)
  if [[ -n $MysqlVersion ]] && [[ "$MysqlVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto         \e[38;5;39mMySQL \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$MysqlVersion \e[38;5;27mDistribution: \e[38;5;33m$MysqlDistribution"
  fi
  PostgresVersion=$(jq -r ".Postgres.Version" $ExportFile)
  if [[ -n $PostgresVersion ]] && [[ "$PostgresVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto    \e[38;5;39mPostgreSQL \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$PostgresVersion"
  fi
  PhpVersion=$(jq -r ".Php.Version" $ExportFile)
  PhpMaxMemory=$(jq -r ".Php.MaxMemory" $ExportFile)
  if [[ -n $PhpVersion ]] && [[ "$PhpVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto           \e[38;5;39mPHP \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$PhpVersion, \e[38;5;27mMemory Limit: \e[38;5;33m$PhpMaxMemory"
  fi
  ElasticsearchVersion=$(jq -r ".Elasticsearch.Version" $ExportFile)
  if [[ -n $ElasticsearchVersion ]] && [[ "$ElasticsearchVersion" != "Unknown" ]] && [[ "$ElasticsearchVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto \e[38;5;39mElasticsearch \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$ElasticsearchVersion"
  fi
  LogstashVersion=$(jq -r ".Logstash.Version" $ExportFile)
  if [[ -n $LogstashVersion ]] && [[ "$LogstashVersion" != "Unknown" ]] && [[ "$LogstashVersion" != "null" ]] ; then
    echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mLogstash \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$LogstashVersion"
  fi
  echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme\e[0;37m"
}

GenerateHtmlTheme () {
  if [[ "$HideVersion" -eq 1 ]]; then
    ShownVersion=""
  else
    ShownVersion="$ScriptVersion"
  fi
# shellcheck disable=SC2162
  read -d '' HtmlCode <<EOF
<!doctype html><html lang="en">
<head>
    <title>FireMotD</title>
    <meta charset="utf-8">
    <meta name="description" content="Generates a HTML MotD message">
    <meta name="author" content="OutsideIT">
    <!-- <script src=\"js/scripts.js\"></script> -->
    <style type="text/css">
        h1 {
            font-family: Verdana;
            font-weight: normal;
            color: #024457;
            font-weight: bold;
            padding-left:30px;
        }
        table a:link {
            color: #666;
            font-weight: bold;
            text-decoration:none;
        }
        table a:visited {
            color: #999999;
            font-weight:bold;
            text-decoration:none;
        }
        table a:active,
        table a:hover {
            color: #bd5a35;
            text-decoration:underline;
        }
        table {
            font-family:Arial, Helvetica, sans-serif;
            color:#666;
            font-size:12px;
            text-shadow: 1px 1px 0px #fff;
            background:#eaebec;
            margin:35px;
            width:80%;
            height:100%
            border:#ccc 3px solid;
            -moz-border-radius:3px;
            -webkit-border-radius:3px;
            border-radius:3px;
            -moz-box-shadow: 0 1px 2px #d1d1d1;
            -webkit-box-shadow: 0 1px 2px #d1d1d1;
            box-shadow: 0 1px 2px #d1d1d1;
        }
        table th {
            padding:12px 25px 12px 25px;
            border-top:2px solid #fafafa;
            border-bottom:2px solid #e0e0e0;
            font-size:22px;
            font-weight:bold;
            background: #ededed;
            background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));
            background: -moz-linear-gradient(top,  #ededed,  #ebebeb);
        }
        table th:first-child {
            text-align: left;
            padding-left:20px;
        }
        table tr:first-child th:first-child {
            -moz-border-radius-topleft:3px;
            -webkit-border-top-left-radius:3px;
            border-top-left-radius:3px;
        }
        table tr:first-child th:last-child {
            -moz-border-radius-topright:3px;
            -webkit-border-top-right-radius:3px;
            border-top-right-radius:3px;
        }
        table tr {
            text-align: left;
            padding-left: 20px;
        }
        table td:first-child {
            text-align: left;
            padding-left:20px;
            border-left: 0;
        }
        table td {
            padding: 8px;
            border-top: 1px solid #ffffff;
            border-bottom: 1px solid #e0e0e0;
            border-left: 2px solid #e0e0e0;

            background: #fafafa;
            background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
            background: -moz-linear-gradient(top,  #fbfbfb,  #fafafa);
        }
        table tr.even td {
            background: #f6f6f6;
            background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
            background: -moz-linear-gradient(top,  #f8f8f8,  #f6f6f6);
        }
        table tr:last-child td {
            border-bottom:0;
        }
        table tr:last-child td:first-child {
            -moz-border-radius-bottomleft:3px;
            -webkit-border-bottom-left-radius:3px;
            border-bottom-left-radius:3px;
        }
        table tr:last-child td:last-child {
            -moz-border-radius-bottomright:3px;
            -webkit-border-bottom-right-radius:3px;
            border-bottom-right-radius:3px;
        }
        table tr:hover td {
            background: #f2f2f2;
            background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#f0f0f0));
            background: -moz-linear-gradient(top,  #f2f2f2,  #f0f0f0);
        }
        .strong {
            font-weight: bold;
        }
        .em {
            font-style: italic;
        }
        .right {
            text-align: right;
        }
        span {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>System Overview - $HostName</h1>
    <table>
        <thead>
            <th>$HostName</th>
            <th class="right">$ShownVersion</th>
        </thead>
        <tbody>
            <tr>
                <td>IP</td>
                <td><span>$HostIp</span></td>
            </tr>
            <tr>
                <td>Operating System</td>
                <td>$Release</td>
            </tr>
            <tr>
                <td>Kernel</td>
                <td>$Kernel</td>
            </tr>
            <tr>
                <td>Platform</td>
                <td>$Platform</td>
            </tr>
            <tr>
                <td>Uptime</td>
                <td><span>${UptimeDays}</span> day(s). <span>${UptimeHours}</span>:<span>${UptimeMinutes}</span>:<span>${UptimeSeconds}</span></td>
            </tr>
            <tr>
                <td>CPU Usage</td>
                <td><span>${CpuUsageAverage}</span> average CPU usage over <span>$CpuUsageCpuCount</span> core(s)</td>
            </tr>
            <tr>
                <td>CPU Load</td>
                <td>$CpuLoad</td>
            </tr>
            <tr>
                <td>Memory</td>
                <td>Free: <span>${MemFreeGB}</span>GB (<span>$MemFreePerc</span>%), Used: <span>${MemUsedGB}</span>GB (<span>$MemUsedPerc</span>%), Total: <span>${MemTotalGB}</span>GB</td>
            </tr>
            <tr>
                <td>Swap</td>
                <td>Free: <span>${SwapFreeGB}</span>GB (<span>$SwapFreePerc</span>%), Used: <span>${SwapUsedGB}</span>GB (<span>$SwapUsedPerc</span>%), Total: <span>${SwapTotalGB}</span>GB</td>
            </tr>
            <tr>
                <td>Root</td>
                <td>Free: <span>${DiskRootFreeGB}</span>GB (<span>$DiskRootFreePerc</span>%), Used: <span>${DiskRootUsedGB}</span>GB (<span>$DiskRootUsedPerc</span>%), Total: <span>${DiskRootTotalGB}</span>GB</td>
            </tr>
            <tr>
                <td>Updates</td>
                <td><span>$UpdateCount</span> ${UpdateType} updates available</td>
            </tr>
            <tr>
                <td>Sessions</td>
                <td><span>$SessionCount</span></td>
            </tr>
            <tr>
                <td>Processes</td>
                <td><span>$ProcessCount</span> running processes of <span>$ProcessMax</span> maximum processes</td>
            </tr>
EOF

  [[ $PhpVersion =~ ^[0-9.]+$ ]] && HtmlCode+="
            <tr>
                <td>PHP Info</td>
                <td>Version: <span>$PhpVersion</span>, Memory Limit: $PhpMaxMemory</td>
            </tr>"
  [[ $HttpdVersion =~ ^[0-9.]+$ ]] && HtmlCode+="
            <tr>
                <td>Apache Info</td>
                <td>Version: <span>$HttpdVersion</span></td>
            </tr>"
  [[ -n $NginxVersion ]] && HtmlCode+="
            <tr>
                <td>nginx Info</td>
                <td>Version: <span>$NginxVersion</span></td>
            </tr>"
  [[ -n $MysqlVersion ]] && HtmlCode+="
            <tr>
                <td>MySQL Info</td>
                <td>Version: <span>$MysqlVersion</span>, Distribution: <span>$MysqlDistribution</span></td>
            </tr>"
  [[ -n $PostgresVersion ]] && HtmlCode+="
            <tr>
                <td>PostgreSQL Info</td>
                <td>Version: <span>$PostgresVersion</span></td>
            </tr>"
  HtmlCode+="
        </tbody>
    </table>
</body>
</html>"
  echo "$HtmlCode"
}

# shellcheck disable=SC2154,SC2034
GenerateInvader () {
  WriteLog Verbose Info "Generating Invader Theme"
  f=3 b=4
  for j in f b; do
    for i in {0..7}; do
      printf -v $j$i %b "\e[${!j}${i}m"
    done
  done
  bld=$'\e[1m'
  rst=$'\e[0m'
  HostName=$(jq -r ".HostName.Value" $ExportFile)
  cat << EOF
 $f1  ▀▄   ▄▀     $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4  ▀▄   ▄▀     $f5 ▄▄▄████▄▄▄    $f6  ▄██▄  $rst
 $f1 ▄█▀███▀█▄    $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4 ▄█▀███▀█▄    $f5███▀▀██▀▀███   $f6▄█▀██▀█▄$rst
 $f1█▀███████▀█   $f2▀▀███▀▀███▀▀   $f3▀█▀██▀█▀   $f4█▀███████▀█   $f5▀▀███▀▀███▀▀   $f6▀█▀██▀█▀$rst
 $f1▀ ▀▄▄ ▄▄▀ ▀   $f2 ▀█▄ ▀▀ ▄█▀    $f3▀▄    ▄▀   $f4▀ ▀▄▄ ▄▄▀ ▀   $f5 ▀█▄ ▀▀ ▄█▀    $f6▀▄    ▄▀$rst
EOF
  HostName=$(jq -r ".HostName.Value" $ExportFile)
  echo -e " $f2 Hostname: $HostName"
  HostIp=$(jq -r ".HostIp.Value" $ExportFile)
  echo -e " $f3 Ip: $HostIp"
  Release=$(jq -r ".Release.Value" $ExportFile)
  echo -e " $f4 Os: $Release"
  Kernel=$(jq -r ".Kernel.Value" $ExportFile)
  echo -e " $f5 Kernel: $Kernel"
  Platform=$(jq -r ".Platform.Value" $ExportFile)
  echo -e " $f6 Platform: $Platform"
  cat << EOF
 $bld$f1▄ ▀▄   ▄▀ ▄   $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4▄ ▀▄   ▄▀ ▄   $f5 ▄▄▄████▄▄▄    $f6  ▄██▄  $rst
 $bld$f1█▄█▀███▀█▄█   $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4█▄█▀███▀█▄█   $f5███▀▀██▀▀███   $f6▄█▀██▀█▄$rst
 $bld$f1▀█████████▀   $f2▀▀▀██▀▀██▀▀▀   $f3▀▀█▀▀█▀▀   $f4▀█████████▀   $f5▀▀▀██▀▀██▀▀▀   $f6▀▀█▀▀█▀▀$rst
 $bld$f1 ▄▀     ▀▄    $f2▄▄▀▀ ▀▀ ▀▀▄▄   $f3▄▀▄▀▀▄▀▄   $f4 ▄▀     ▀▄    $f5▄▄▀▀ ▀▀ ▀▀▄▄   $f6▄▀▄▀▀▄▀▄$rst
EOF
  UptimeDays=$(jq -r ".Uptime.Days" $ExportFile)
  UptimeHours=$(jq -r ".Uptime.Hours" $ExportFile)
  UptimeMinutes=$(jq -r ".Uptime.Minutes" $ExportFile)
  UptimeSeconds=$(jq -r ".Uptime.Seconds" $ExportFile)
  echo -e " $f2 Uptime ${UptimeDays} day(s). ${UptimeHours}:${UptimeMinutes}:${UptimeSeconds}"
  CpuUsageAverage=$(jq -r ".CpuUsage.Average" $ExportFile)
  CpuUsageCpuCount=$(jq -r ".CpuUsage.CpuCount" $ExportFile)
  CpuUsageCoreCount=$(jq -r ".CpuUsage.CoreCount" $ExportFile)
  CpuUsageSocketCount=$(jq -r ".CpuUsage.SocketCount" $ExportFile)
  echo -e " $f3 CPU Usage: ${CpuUsageAverage} % avg over ${VCL}${CpuUsageCpuCount}${VC} cpu(s)  ($CpuUsageCoreCount core(s) x $CpuUsageSocketCount socket(s))"
  CpuLoad=$(jq -r ".CpuLoad.Value" $ExportFile)
  echo -e " $f4 CPU Load: $CpuLoad"
  UpdateCount=$(jq -r ".Updates.Count" $ExportFile)
  UpdateType=$(jq -r ".Updates.Type" $ExportFile)
  echo -e " $f5 Updates: $UpdateCount ${UpdateType} updates available"
  echo -e "$f7$rst"
}

PrintHelp () {
  PrintVersion
  echo "
Usage:
 $ScriptName [-v] -t <Theme Name>
 $ScriptName [-v] -C ['String']
 $ScriptName [-vhVs]

Options:
   -h | --help                          Shows this help and exits
   -v | --verbose                       Verbose mode
   -d | --debug                         Debug mode
   -V | --version                       Shows version information and exits
   -t | --theme <Theme Name>            Shows MotD with chosen theme
  -TF | --TemplateFile <Template Path>  Shows MotD with chosen template file
   -C | --colortest                     Prints color test to screen
   -M | --colormap                      Prints color test including color numbers
   -S | --save                          Saves data to /usr/share/firemotd/data/FireMotD.json
   -R | --RenderTime			Time to render FireMotD. Values can be cache (default) or live
   -G | --GenerateCache			Generates cache for give theme. Values can be 'all' or a theme name
  -MT | --MultiThreaded			Enable multithreaded Exploring. Experimental feature!
  -HV | --hideversion                   Hides version number (legacy themes)
 -sru | --skiprepoupdate                Skip repository package update (apt only)

Legacy themes:
 - Original
 - Modern
 - Invader
 - Clean

Html theme:
 - Html

Theme templates:
 - Blanco
 - Blue
 - Digipolis
 - Elastic
 - Eline
 - Gray
 - Orange
 - Red

Examples:
 $ScriptName -t Elastic
 $ScriptName -t html > /tmp/motd.html
 $ScriptName --theme Digipolis
 $ScriptName -TF /usr/share/firemotd/themes/FireMotD-theme-Eline.json
 $ScriptName --colortest
 $ScriptName -M
 sudo $ScriptName --saveupdates

Note:
 Some functionalities may require superuser privileges. Eg. check for updates.
 If you have problems, try something like:
 sudo $ScriptName -S -D all -d
"
  exit 0
}

PrintVersion () {
  cVersion="$(echo -e "${ScriptVersion}" | tr -d '[:space:]')"
  echo "$(basename "$0") v$cVersion"
  return 0
}

CheckSudo () {
  if [ "$EUID" -ne 0 ]; then
    echo "Update check requires root privileges"
    echo "Example:"
    echo "    sudo $ScriptPath"
    exit 1
  fi
  return 0
}

CheckDependencies () {
  command -v bc >/dev/null 2>&1 || { WriteLog Output Error "Unable to detect bc. Please install manually or run \"FireMotD -I -v\"." >&2 ; exit 1 ; }
  command -v jq >/dev/null 2>&1 || { WriteLog Output Error "Unable to detect jq. Please install manually or run \"FireMotD -I -v\"." >&2 ; exit 1 ; }
  command -v mpstat >/dev/null 2>&1 || { WriteLog Output Error "Unable to detect mpstat. Please install sysstat package manually or run \"FireMotD -I -v\"." >&2 ; exit 1 ; }
}

RenderHostIp () {
  HostIp=$(jq -r ".HostIp.Value" $ExportFile)
  if [[ -n "$HostIp" ]] && [[ "$HostIp" != "null" ]] && [[ "$HostIp" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Ip"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      HostIpRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}${HostIp}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      HostIpRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .HostIp.Value $ExportFile)"
    fi
    echo "${HostIpRender}"
  fi
}

RenderRelease () {
  Release=$(jq -r ".Release.Value" $ExportFile)
  if [[ -n "$Release" ]] && [[ "$Release" != "null" ]] && [[ "$Release" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Release"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      ReleaseRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}${Release}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      ReleaseRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}\$(jq -r .Release.Value $ExportFile)"
    fi
    echo "${ReleaseRender}"
  fi
}

RenderKernel () {
  Kernel=$(jq -r ".Kernel.Value" $ExportFile)
  if [[ -n "$Kernel" ]] && [[ "$Kernel" != "null" ]] && [[ "$Kernel" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Kernel"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      KernelRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}${Kernel}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      KernelRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}\$(jq -r .Kernel.Value $ExportFile)"
    fi
    echo "${KernelRender}"
  fi
}

RenderPlatform () {
  Platform=$(jq -r ".Platform.Value" $ExportFile)
  if [[ -n "$Platform" ]] && [[ "$Platform" != "null" ]] && [[ "$Platform" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Platform"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      PlatformRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}${Platform}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      PlatformRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}\$(jq -r .Platform.Value $ExportFile)"
    fi
    echo "${PlatformRender}"
  fi
}

RenderUptime () {
  UptimeDays=$(jq -r ".Uptime.Days" $ExportFile)
  if [[ -n $UptimeDays ]] && [[ "$UptimeDays" != "null" ]] && [[ "$UptimeDays" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Uptime"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
     UptimeRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}${UptimeDays} ${ValueColor}day(s). ${HighlightColor}$(jq -r ".Uptime.Hours" $ExportFile)${ValueColor}:${HighlightColor}$(jq -r ".Uptime.Minutes" $ExportFile)${ValueColor}:${HighlightColor}$(jq -r .Uptime.Seconds $ExportFile)"
    elif [[ "$RenderTime" == "cache" ]] ; then
      UptimeRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .Uptime.Days $ExportFile) ${ValueColor}day(s). ${HighlightColor}\$(jq -r .Uptime.Hours $ExportFile)${ValueColor}:${HighlightColor}\$(jq -r .Uptime.Minutes $ExportFile)${ValueColor}:${HighlightColor}\$(jq -r .Uptime.Seconds $ExportFile)"
    fi
    echo "${UptimeRender}"
  fi
}

RenderCpuUsage () {
  CpuUsageAverage=$(jq -r ".CpuUsage.Average" $ExportFile)
  if [[ -n $CpuUsageAverage ]] && [[ "$CpuUsageAverage" != "null" ]] && [[ "$CpuUsageAverage" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="CPU Usage"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
    CpuUsageRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}${CpuUsageAverage}%${ValueColor} avg over ${HighlightColor}$(jq -r ".CpuUsage.CpuCount" $ExportFile) ${ValueColor}cpu(s) (${HighlightColor}$(jq -r ".CpuUsage.CoreCount" $ExportFile) ${ValueColor}core(s) x ${HighlightColor}$(jq -r ".CpuUsage.SocketCount" $ExportFile) ${ValueColor}socket(s))"
    elif [[ "$RenderTime" == "cache" ]] ; then
    CpuUsageRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .CpuUsage.Average $ExportFile)%${ValueColor} avg over ${HighlightColor}\$(jq -r .CpuUsage.CpuCount $ExportFile) ${ValueColor}cpu(s) (${HighlightColor}\$(jq -r .CpuUsage.CoreCount $ExportFile) ${ValueColor}core(s) x ${HighlightColor}\$(jq -r .CpuUsage.SocketCount $ExportFile) ${ValueColor}socket(s))"
    fi
    echo "${CpuUsageRender}"
  fi
}

RenderCpuLoad () {
  CpuLoad=$(jq -r ".CpuLoad.Value" $ExportFile)
  if [[ -n $CpuLoad ]] && [[ "$CpuLoad" != "null" ]] && [[ "$CpuLoad" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="CPU Load"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      CpuLoadRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}${CpuLoad}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      CpuLoadRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .CpuLoad.Value $ExportFile)"
    fi
    echo "${CpuLoadRender}"
  fi
}

RenderMemory () {
  MemTotalGB=$(jq -r ".Memory.TotalGB" $ExportFile)
  if [[ -n $MemTotalGB ]] && [[ "$MemTotalGB" != "null" ]] && [[ "$MemTotalGB" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Memory"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      MemoryRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}$(jq -r .Memory.FreeGB $ExportFile)GB${ValueColor} (${HighlightColor}$(jq -r .Memory.FreePerc $ExportFile)%${ValueColor}), Used: ${HighlightColor}$(jq -r .Memory.UsedGB $ExportFile)GB${ValueColor} (${HighlightColor}$(jq -r .Memory.UsedPerc $ExportFile)%${ValueColor}), Total: ${HighlightColor}$(jq -r .Memory.TotalGB $ExportFile)GB${ValueColor}"
    elif [[ "$RenderTime" == "cache" ]] ; then
      MemoryRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}\$(jq -r .Memory.FreeGB ${ExportFile})GB${ValueColor} (${HighlightColor}\$(jq -r .Memory.FreePerc ${ExportFile})%${ValueColor}), Used: ${HighlightColor}\$(jq -r .Memory.UsedGB ${ExportFile})GB${ValueColor} (${HighlightColor}\$(jq -r .Memory.UsedPerc ${ExportFile})%${ValueColor}), Total: ${HighlightColor}\$(jq -r .Memory.TotalGB ${ExportFile})GB${ValueColor}"
    fi
    echo "${MemoryRender}"
  fi
}

RenderSwap () {
  SwapTotalGB=$(jq -r ".Swap.TotalGB" $ExportFile)
  if [[ -n $SwapTotalGB ]] && [[ "$SwapTotalGB" != "null" ]] && [[ "$SwapTotalGB" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Swap"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      SwapRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}$(jq -r .Swap.FreeGB ${ExportFile})GB ${ValueColor}(${HighlightColor}$(jq -r .Swap.FreePerc ${ExportFile})%${ValueColor}), Used: ${HighlightColor}$(jq -r .Swap.UsedGB ${ExportFile})GB ${ValueColor}(${HighlightColor}$(jq -r .Swap.UsedPerc ${ExportFile})%${ValueColor}), Total: ${HighlightColor}$(jq -r .Swap.TotalGB ${ExportFile})GB"
    elif [[ "$RenderTime" == "cache" ]] ; then
      SwapRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}\$(jq -r .Swap.FreeGB ${ExportFile})GB ${ValueColor}(${HighlightColor}\$(jq -r .Swap.FreePerc ${ExportFile})%${ValueColor}), Used: ${HighlightColor}\$(jq -r .Swap.UsedGB ${ExportFile})GB ${ValueColor}(${HighlightColor}\$(jq -r .Swap.UsedPerc ${ExportFile})%${ValueColor}), Total: ${HighlightColor}\$(jq -r .Swap.TotalGB ${ExportFile})GB"
    fi
    echo "${SwapRender}"
  fi
}

RenderRoot () {
  DiskRootTotalGB=$(jq -r ".DiskRoot.TotalGB" $ExportFile)
  if [[ -n $DiskRootTotalGB ]] && [[ "$DiskRootTotalGB" != "null" ]] && [[ "$DiskRootTotalGB" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Root"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      DiskRootRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}$(jq -r .DiskRoot.FreeGB ${ExportFile})GB ${ValueColor}(${HighlightColor}$(jq -r .DiskRoot.FreePerc ${ExportFile})%${ValueColor}), Used: ${HighlightColor}$(jq -r .DiskRoot.UsedGB ${ExportFile})GB ${ValueColor}(${HighlightColor}$(jq -r .DiskRoot.UsedPerc ${ExportFile})%${ValueColor}), Total: ${HighlightColor}$(jq -r .DiskRoot.TotalGB ${ExportFile})GB"
    elif [[ "$RenderTime" == "cache" ]] ; then
      DiskRootRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Free: ${HighlightColor}\$(jq -r .DiskRoot.FreeGB ${ExportFile})GB ${ValueColor}(${HighlightColor}\$(jq -r .DiskRoot.FreePerc ${ExportFile})%${ValueColor}), Used: ${HighlightColor}\$(jq -r .DiskRoot.UsedGB ${ExportFile})GB ${ValueColor}(${HighlightColor}\$(jq -r .DiskRoot.UsedPerc ${ExportFile})%${ValueColor}), Total: ${HighlightColor}\$(jq -r .DiskRoot.TotalGB ${ExportFile})GB"
    fi
    echo "${DiskRootRender}"
  fi
}

RenderUpdates () {
  UpdateCount=$(jq -r ".Updates.Count" $ExportFile)
  if [[ -n $UpdateCount ]] && [[ "$UpdateCount" != "null" ]] && [[ "$UpdateCount" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Updates"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      UpdatesRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}$(jq -r .Updates.Count ${ExportFile}) $(jq -r .Updates.Type ${ExportFile}) ${ValueColor}updates available."
    elif [[ "$RenderTime" == "cache" ]] ; then
      UpdatesRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .Updates.Count ${ExportFile}) \$(jq -r .Updates.Type ${ExportFile}) ${ValueColor}updates available."
    fi
    echo "${UpdatesRender}"
  fi
}

RenderSessions () {
  SessionCount=$(jq -r ".Sessions.Count" $ExportFile)
  if [[ -n $SessionCount ]] && [[ "$SessionCount" != "null" ]] && [[ "$SessionCount" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Sessions"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      SessionsRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}$(jq -r .Sessions.Count ${ExportFile}) session(s)"
    elif [[ "$RenderTime" == "cache" ]] ; then
      SessionsRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .Sessions.Count ${ExportFile}) session(s)"
    fi
    echo "${SessionsRender}"
  fi
}

RenderProcesses () {
  ProcessCount=$(jq -r ".Processes.Count" $ExportFile)
  ProcessMax=$(jq -r ".Processes.Max" $ExportFile)
  if [[ -n $ProcessCount ]] && [[ "$ProcessCount" != "null" ]] && [[ "$ProcessCount" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Processes"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      ProcessesRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}$(jq -r .Processes.Count ${ExportFile}) ${ValueColor}running processes of ${HighlightColor}$(jq -r .Processes.Max ${ExportFile}) ${ValueColor}maximum processes"
    elif [[ "$RenderTime" == "cache" ]] ; then
      ProcessesRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${HighlightColor}\$(jq -r .Processes.Count ${ExportFile}) ${ValueColor}running processes of ${HighlightColor}\$(jq -r .Processes.Max ${ExportFile}) ${ValueColor}maximum processes"
    fi
    echo "${ProcessesRender}"
  fi
}

RenderHttpd () {
  HttpdVersion=$(jq -r ".Httpd.Version" $ExportFile)
  if [[ -n $HttpdVersion ]] && [[ "$HttpdVersion" != "null" ]] && [[ "$HttpdVersion" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Apache"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      HttpdRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Httpd.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      HttpdRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Httpd.Version ${ExportFile})"
    fi
    echo "${HttpdRender}"
  fi
}

RenderNginx () {
  NginxVersion=$(jq -r ".Nginx.Version" $ExportFile)
  if [[ -n $NginxVersion ]] && [[ "$NginxVersion" != "null" ]] && [[ "$NginxVersion" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Nginx"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      NginxRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Nginx.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      NginxRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Nginx.Version ${ExportFile})"
    fi
    echo "${NginxRender}"
  fi
}

RenderMysql () {
  MysqlVersion=$(jq -r ".Mysql.Version" $ExportFile)
  if [[ -n $MysqlVersion ]] && [[ "$MysqlVersion" != "null" ]] && [[ "$MysqlVersion" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="MySQL"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      MysqlRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Mysql.Version ${ExportFile}), Distribution: $(jq -r .Mysql.Distribution ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      MysqlRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Mysql.Version ${ExportFile}), Distribution: \$(jq -r .Mysql.Distribution ${ExportFile})"
    fi
    echo "${MysqlRender}"
  fi
}

RenderPostgres () {
  PostgresVersion=$(jq -r ".Postgres.Version" $ExportFile)
  if [[ -n $PostgresVersion ]] && [[ "$PostgresVersion" != "null" ]]  && [[ "$PostgresVersion" != "Unknown" ]]; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="PostgresQL"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
    PostgresRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Postgres.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
    PostgresRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Postgres.Version ${ExportFile})"
    fi
    echo "${PostgresRender}"
  fi
}

RenderPhp () {
  PhpVersion=$(jq -r ".Php.Version" $ExportFile)
  PhpMaxMemory=$(jq -r ".Php.MaxMemory" $ExportFile)
  if [[ -n $PhpVersion ]] && [[ "$PhpVersion" != "null" ]] && [[ "$PhpVersion" != "Unknown" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="PHP"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      PhpRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: ${HighlightColor}$(jq -r .Php.Version ${ExportFile})${ValueColor}, Memory Limit: ${HighlightColor}$(jq -r .Php.MaxMemory ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      PhpRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: ${HighlightColor}\$(jq -r .Php.Version ${ExportFile})${ValueColor}, Memory Limit: ${HighlightColor}\$(jq -r .Php.MaxMemory ${ExportFile})"
    fi
    echo "${PhpRender}"
  fi
}

RenderElasticsearch () {
  ElasticsearchVersion=$(jq -r ".Elasticsearch.Version" $ExportFile)
  if [[ -n $ElasticsearchVersion ]] && [[ "$ElasticsearchVersion" != "Unknown" ]] && [[ "$ElasticsearchVersion" != "null" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Elasticsearch"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      ElasticsearchRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Elasticsearch.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      ElasticsearchRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Elasticsearch.Version ${ExportFile})"
    fi
    echo "${ElasticsearchRender}"
  fi
}

RenderLogstash () {
  LogstashVersion=$(jq -r ".Logstash.Version" $ExportFile)
  if [[ -n $LogstashVersion ]] && [[ "$LogstashVersion" != "Unknown" ]] && [[ "$LogstashVersion" != "null" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Logstash"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      LogstashRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Logstash.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      LogstashRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Logstash.Version ${ExportFile})"
    fi
    echo "${LogstashRender}"
  fi
}

RenderKibana () {
  KibanaVersion=$(jq -r ".Kibana.Version" $ExportFile)
  if [[ -n $KibanaVersion ]] && [[ "$KibanaVersion" != "Unknown" ]] && [[ "$KibanaVersion" != "null" ]] ; then
    PrintChar "$Char" 2 "$CharColor"
    InfoKey="Kibana"
    PreKeySpace=$(( SeparatorSpace - ${#InfoKey} ))
    PreKeyString="$(PrintChar " " "$PreKeySpace" "$CharColor")"
    if [[ "$RenderTime" == "live" ]] ; then
      KibanaRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: $(jq -r .Kibana.Version ${ExportFile})"
    elif [[ "$RenderTime" == "cache" ]] ; then
      KibanaRender="${PreKeyString}${KeyColor}${InfoKey} ${SeparatorColor}${Separator} ${ValueColor}Version: \$(jq -r .Kibana.Version ${ExportFile})"
    fi
    echo "${KibanaRender}"
  fi
}

GenerateLine () {
  WriteLog Debug Info "Generating \"${Type}\""
  PrintChar "$Char" "$Length" "$CharColor"
  if [[ "$RenderTime" == "live" ]] ; then
    echo -en "\n"
  elif [[ "$RenderTime" == "cache" ]] ; then
    echo -en "\n" >> "/usr/share/firemotd/cache/firemotd-${Theme}.motd"
  fi
}

GenerateHeader () {
  WriteLog Debug Info "Generating \"${Type}\""
  ValueColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].ValueColor" "$Template")
  if [[ "$ValueColor" == "null" ]] ; then ValueColor=$DefaultValueColor ; fi
  HostNameHeader="$(hostname)"
  HostChars=$((${#HostNameHeader} + 9))
  if (( HostChars > 47 )); then
    HostNameHeader=${HostNameHeader:0:39}
    HostChars=47
  fi
  LeftoverChars=$(( Length - HostChars -10 ))
  (( LeftoverChars <= 0 )) && LeftoverChars=0
  PrintChar "$Char" 15 "$CharColor"
  PrintChar " " 2 "$CharColor"
  PrintChar "$HostNameHeader" 1 "$ValueColor"
  PrintChar " " 2 "$CharColor"
  PrintChar "$Char" "$LeftoverChars" "$CharColor"
  if [[ "$RenderTime" == "live" ]] ; then
    echo -en "\n"
  elif [[ "$RenderTime" == "cache" ]] ; then
    echo -en "\n" >> "/usr/share/firemotd/cache/firemotd-${Theme}.motd"
  fi
}

GenerateInfo () {
  Value=$(jq -r --arg i "$i" ".Template[$i | tonumber].Value" "$Template")
  WriteLog Debug Info "Generating \"${Value}\""
  ValueColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].ValueColor" "$Template")
  if [[ "$ValueColor" == "null" ]] ; then ValueColor=$DefaultValueColor ; fi
  KeyColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].KeyColor" "$Template")
  if [[ "$KeyColor" == "null" ]] ; then KeyColor=$DefaultKeyColor ; fi
  Separator=$(jq -r --arg i "$i" ".Template[$i | tonumber].Separator" "$Template")
  if [[ "$Separator" == "null" ]] ; then Separator=$DefaultSeparator ; fi
  SeparatorColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].SeparatorColor" "$Template")
  if [[ "$SeparatorColor" == "null" ]] ; then SeparatorColor=$DefaultSeparatorColor ; fi
  HighlightColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].HighlightColor" "$Template")
  if [[ "$HighlightColor" == "null" ]] ; then HighlightColor=$DefaultHighlightColor ; fi
  WriteLog Debug Info "Rendering $Value"
  RenderResult="$("Render${Value}")"
  if [[ "$RenderResult" != "" ]] ; then
    if [[ "$RenderTime" == "live" ]] ; then
      echo -ne "$RenderResult\n\e[0m"
    elif [[ "$RenderTime" == "cache" ]] ; then
      if [ "$Debug" = 1 ] ; then
        echo -ne "$RenderResult\n\e[0m"
      fi
      echo -ne "$RenderResult\n\e[0m" >> "/usr/share/firemotd/cache/firemotd-${Theme}.motd"
    fi
  fi
}

PrintChar () {
  str=$1
  num=$2
  col=$3
  for (( i = 1; i <= num; i++ )) ; do
    if [[ "$RenderTime" == "live" ]] ; then
      echo -en "$col$str\e[0m"
    elif [[ "$RenderTime" == "cache" ]] ; then
      echo -en "$col$str\e[0m" >> "/usr/share/firemotd/cache/firemotd-${Theme}.motd"
    fi
  done
}

PrintTemplate () {
  WriteLog Verbose Info "Printing template \"$Template\""
  DefaultChar=$(jq -r '.DefaultSettings.Char' "$Template")
  if [[ "$DefaultChar" == "null" ]] ; then DefaultChar="" ; fi
  DefaultCharColor=$(jq -r '.DefaultSettings.CharColor' "$Template")
  if [[ "$DefaultCharColor" == "null" ]] ; then DefaultCharColor="\e[0m" ; fi
  DefaultKeyColor=$(jq -r '.DefaultSettings.KeyColor' "$Template")
  if [[ "$DefaultKeyColor" == "null" ]] ; then DefaultKeyColor="\e[0m" ; fi
  DefaultCharLength=$(jq -r '.DefaultSettings.Length' "$Template")
  if [[ "$DefaultCharLength" == "null" ]] ; then DefaultCharLength="79" ; fi
  SeparatorSpace=$(jq -r '.DefaultSettings.SeparatorSpace' "$Template")
  if [[ "$SeparatorSpace" == "null" ]] ; then SeparatorSpace="10" ; fi
  (( SeparatorSpace < 8 )) && SeparatorSpace=0
  (( SeparatorSpace > 25 )) && SeparatorSpace=25
  DefaultSeparator=$(jq -r '.DefaultSettings.Separator' "$Template")
  if [[ "$DefaultSeparator" == "null" ]] ; then DefaultSeparator="" ; fi
  DefaultSeparatorColor=$(jq -r '.DefaultSettings.SeparatorColor' "$Template")
  if [[ "$DefaultSeparatorColor" == "null" ]] ; then DefaultSeparatorColor="\e[0m" ; fi
  DefaultValueColor=$(jq -r '.DefaultSettings.ValueColor' "$Template")
  if [[ "$DefaultValueColor" == "null" ]] ; then DefaultValueColor="\e[0m" ; fi
  DefaultHighlightColor=$(jq -r '.DefaultSettings.HighlightColor' "$Template")
  if [[ "$DefaultHighlightColor" == "null" ]] ; then DefaultHighlightColor="\e[0m" ; fi
  WriteLog Debug Info "Temlate default Char \"$DefaultChar\" CharColor \"$DefaultCharColor\" Length \"$DefaultCharLength\" Separator \"$DefaultSeparator\" SeparatorColor \"$DefaultSeparatorColor\""
  if jq '.' "$Template" >/dev/null 2>&1 ; then
    WriteLog Verbose Info "Parsed json file $Template successfully."
    LineCount=$(jq '.Template | length' "$Template")
    WriteLog Verbose Info "Looping through $LineCount lines"
    LineCount=$((LineCount-1))
    for i in $(seq 0 $LineCount) ; do
      Type=$(jq -r --arg i "$i" ".Template[$i | tonumber].Type" "$Template")
      Char=$(jq -r --arg i "$i" ".Template[$i | tonumber].Char" "$Template")
      if [[ "$Char" == "null" ]] ; then Char=$DefaultChar ; fi
      CharColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].CharColor" "$Template")
      if [[ "$CharColor" == "null" ]] ; then CharColor=$DefaultCharColor ; fi
      Length=$(jq -r --arg i "$i" ".Template[$i | tonumber].Length" "$Template")
      if [[ "$Length" == "null" ]] ; then Length=$DefaultCharLength ; fi
      WriteLog Debug Info "Generating line \"$i\", type \"$Type\", character \"$Char\", color \"$CharColor\", length \"$Length\"."
      "Generate${Type}"
    done
  else
    WriteLog Output Error "Failed to parse json file $Template. Please verify with json lint validator"
  fi
}

GenerateCache () {
  Theme=$1
  WriteLog Verbose Info "Generating cache for theme \"${Theme}\"."
  Template="/usr/share/firemotd/themes/FireMotD-theme-${Theme}.json"
  WriteLog Debug Info "Template \"${Template}\"."
  Cache="/usr/share/firemotd/cache/firemotd-${Theme}.motd"
  if [ -f "$Cache" ] ; then
    WriteLog Debug Info "Cleaning up old cache \"${Cache}\"."
    rm "$Cache" -f
  fi
  WriteLog Debug Info "Creating \"${Cache}\""
  touch "$Cache"
  WriteLog Debug Info "Chmod 0664 \"${Cache}\""
  chmod 0664 "$Cache"
  DefaultChar=$(jq -r '.DefaultSettings.Char' "$Template")
  if [[ "$DefaultChar" == "null" ]] ; then DefaultChar="" ; fi
  DefaultCharColor=$(jq -r '.DefaultSettings.CharColor' "$Template")
  if [[ "$DefaultCharColor" == "null" ]] ; then DefaultCharColor="\e[0m" ; fi
  DefaultKeyColor=$(jq -r '.DefaultSettings.KeyColor' "$Template")
  if [[ "$DefaultKeyColor" == "null" ]] ; then DefaultKeyColor="\e[0m" ; fi
  DefaultCharLength=$(jq -r '.DefaultSettings.Length' "$Template")
  if [[ "$DefaultCharLength" == "null" ]] ; then DefaultCharLength="79" ; fi
  SeparatorSpace=$(jq -r '.DefaultSettings.SeparatorSpace' "$Template")
  if [[ "$SeparatorSpace" == "null" ]] ; then SeparatorSpace="10" ; fi
  (( SeparatorSpace < 8 )) && SeparatorSpace=0
  (( SeparatorSpace > 25 )) && SeparatorSpace=25
  DefaultSeparator=$(jq -r '.DefaultSettings.Separator' "$Template")
  if [[ "$DefaultSeparator" == "null" ]] ; then DefaultSeparator="" ; fi
  DefaultSeparatorColor=$(jq -r '.DefaultSettings.SeparatorColor' "$Template")
  if [[ "$DefaultSeparatorColor" == "null" ]] ; then DefaultSeparatorColor="\e[0m" ; fi
  DefaultValueColor=$(jq -r '.DefaultSettings.ValueColor' "$Template")
  if [[ "$DefaultValueColor" == "null" ]] ; then DefaultValueColor="\e[0m" ; fi
  DefaultHighlightColor=$(jq -r '.DefaultSettings.HighlightColor' "$Template")
  if [[ "$DefaultHighlightColor" == "null" ]] ; then DefaultHighlightColor="\e[0m" ; fi
  WriteLog Debug Info "Default \"$DefaultChar\" CharColor \"$DefaultCharColor\" Length \"$DefaultCharLength\" Separator \"$DefaultSeparator\" SeparatorColor \"$DefaultSeparatorColor\""
  if jq '.' "$Template" >/dev/null 2>&1 ; then
    WriteLog Verbose Info "Parsed template json for ${Theme} successfully."
    LineCount=$(jq '.Template | length' "$Template")
    WriteLog Debug Info "Looping through $LineCount lines"
    LineCount=$((LineCount-1))
    for i in $(seq 0 $LineCount) ; do
      Type=$(jq -r --arg i "$i" ".Template[$i | tonumber].Type" "$Template")
      Char=$(jq -r --arg i "$i" ".Template[$i | tonumber].Char" "$Template")
      if [[ "$Char" == "null" ]] ; then Char=$DefaultChar ; fi
      CharColor=$(jq -r --arg i "$i" ".Template[$i | tonumber].CharColor" "$Template")
      if [[ "$CharColor" == "null" ]] ; then CharColor=$DefaultCharColor ; fi
      Length=$(jq -r --arg i "$i" ".Template[$i | tonumber].Length" "$Template")
      if [[ "$Length" == "null" ]] ; then Length=$DefaultCharLength ; fi
      WriteLog Debug Info "Generating line \"$i\" ,type \"$Type\", char \"$Char\", color \"$CharColor\", length \"$Length\"."
      "Generate${Type}"
    done
  else
    WriteLog Output Error "Failed to parse json file $Template. Please verify with json lint validator"
  fi
}

CheckTheme () {
  WriteLog Debug Info "Normalising theme $Theme"
  Theme="$(echo "$Theme" | tr '[:upper:]' '[:lower:]')"
  Theme="${Theme^}"
  if [ -f "/usr/share/firemotd/themes/FireMotD-theme-${Theme}.json" ] ; then
    WriteLog Debug Info "Theme ${Theme} found in FireMotD themes folder"
    Template="/usr/share/firemotd/themes/FireMotD-theme-${Theme}.json"
    if [[ "$RenderTime" == "live" ]] ; then
      WriteLog Verbose Info "Live FireMotD $Theme generation"
      PrintTemplate
    elif [ -f "/usr/share/firemotd/cache/firemotd-${Theme}.motd" ] ; then
      WriteLog Debug Info "Cache for theme ${Theme} found in FireMotD cache folder"
      WriteLog Verbose Info "Evaluating cached template \"firemotd-${Theme}.motd\"."
      eval "echo \"$(cat "/usr/share/firemotd/cache/firemotd-${Theme}.motd")\""
    else
      WriteLog Output Warning "Cache for theme ${Theme} not found in FireMotD cache folder. Generating..."
      GenerateCache "$Theme"
      WriteLog Verbose Info "Evaluating cached template \"firemotd-${Theme}.motd\"."
      eval "echo \"$(cat "/usr/share/firemotd/cache/firemotd-${Theme}.motd")\""
    fi
  else
    case "$Theme" in
      original|Original) StartOriginalBlue ; GenerateOriginal256Color ;;
      html|Html) GenerateHtmlTheme ;;
      invader|Invader) GenerateInvader ;;
      all|All) WriteLog Output Info "Action $Action on $Theme themes" ;;
      *) WriteLog Output Error "You specified a non-existant theme: $Theme" ; exit 2 ;;
    esac
  fi
}

GenerateCaches () {
  WriteLog Debug Info "Theme ${Theme} found in FireMotD themes folder"
  if [[ "$Theme" == "all" ]] ; then
    WriteLog Verbose Info "Generating $Theme theme caches"
    GenerateCache Blue
    GenerateCache Digipolis
    GenerateCache Elastic
    GenerateCache Eline
    GenerateCache Gray
    GenerateCache Orange
    GenerateCache Red
    GenerateCache Zebra
  elif [ -f "/usr/share/firemotd/themes/FireMotD-theme-${Theme}.json" ] ; then
    WriteLog Debug Info "Theme ${Theme} found in FireMotD themes folder"
    WriteLog Verbose Info "Generating $Theme theme cache"
    GenerateCache "$Theme"
  else
    WriteLog Output Error "Theme ${Theme} not found in /usr/share/firemotd/themes"
    exit 1
  fi
}

InstallFireMotD () {
  WriteLog Output Info "Attempting FireMotD installation"
  WriteLog Verbose Info "Creating firemotd folder structure and permissions"
  WriteLog Debug Info "Creating firemotd folder"
  mkdir -m 0775 /usr/share/firemotd
  WriteLog Debug Info "Cleaning up existing /usr/share/firemotd permissions"
  chmod 0775 -R /usr/share/firemotd
  WriteLog Debug Info "Creating themes directory folder"
  mkdir -m 0775  /usr/share/firemotd/themes
  WriteLog Debug Info "Creating templates folder"
  mkdir -m 0775 /usr/share/firemotd/templates
  WriteLog Debug Info "Creating data folder"
  mkdir -m 0777 -p /usr/share/firemotd/data
  WriteLog Debug Info "Making data writable"
  chmod 0777 /usr/share/firemotd/data
  WriteLog Debug Info "Creating public data folder (poc)"
  mkdir -m 0777 -p /usr/share/firemotd/data/rw
  WriteLog Debug Info "Creating private data folder (poc)"
  mkdir -m 0775 -p /usr/share/firemotd/data/ro
  WriteLog Debug Info "Creating cache folder"
  mkdir -m 0775 -p /usr/share/firemotd/cache
  chmod 0775 /usr/share/firemotd/cache
  WriteLog Verbose Info "Downloading themes"
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Blanco.json > /usr/share/firemotd/themes/FireMotD-theme-Blanco.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Blue.json > /usr/share/firemotd/themes/FireMotD-theme-Blue.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Digipolis.json > /usr/share/firemotd/themes/FireMotD-theme-Digipolis.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Elastic.json > /usr/share/firemotd/themes/FireMotD-theme-Elastic.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Eline.json > /usr/share/firemotd/themes/FireMotD-theme-Eline.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Gray.json > /usr/share/firemotd/themes/FireMotD-theme-Gray.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Modern.json > /usr/share/firemotd/themes/FireMotD-theme-Modern.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Red.json > /usr/share/firemotd/themes/FireMotD-theme-Red.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Orange.json > /usr/share/firemotd/themes/FireMotD-theme-Orange.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/themes/FireMotD-theme-Zebra.json > /usr/share/firemotd/themes/FireMotD-theme-Zebra.json
  WriteLog Verbose Info "Downloading templates"
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/templates/FireMotD-template-all.json > /usr/share/firemotd/templates/FireMotD-template-all.json
  curl -s https://raw.githubusercontent.com/OutsideIT/FireMotD/master/templates/FireMotD-template-basic.json > /usr/share/firemotd/templates/FireMotD-template-basic.json
  WriteLog Verbose Info "Copying $(readlink -f "$0") to /usr/local/bin/FireMotD"
  cp "$(readlink -f "$0")" "/usr/local/bin/FireMotD"
  chmod 0775 "/usr/local/bin/FireMotD"
  if [[ -x "/usr/bin/yum" ]] ; then
    WriteLog Verbose Info "Installing required yum packages"
    UpdateType="yum"
    YumExec=$(command -v yum 2>/dev/null)
    InstallResult=$($YumExec install jq sysstat -y)
    WriteLog Debug Info "Install result: $InstallResult"
  elif [[ -x "/usr/bin/apt" ]] ; then
    WriteLog Verbose Info "Installing required apt-get packages"
    UpdateType="apt"
    AptExec=$(command -v apt-get 2>/dev/null)
    InstallResult=$($AptExec install jq sysstat -y)
    WriteLog Debug Info "Install result: $InstallResult"
  fi
  WriteLog Output Info "Generating information"
  /usr/local/bin/FireMotD -S -d -D all
  WriteLog Output Info "Generating caches"
  /usr/local/bin/FireMotD -G all
  WriteLog Output Info "Generating FireMotD"
  /usr/local/bin/FireMotD -t Digipolis
  WriteLog Debug Info "Chmod 0775 /usr/share/firemotd"
  chmod 0775 /usr/share/firemotd
  WriteLog Debug Info "Chmod 0776 $ExportFile"
  chmod 0776 "$ExportFile"
}

Present () {
  WriteLog Output Info "Starting FireMotD theme presentation"
  WriteLog Verbose Info "FireMotD Blue theme"
  FireMotD -T Blue
  WriteLog Verbose Info "FireMotD Digipolis theme"
  FireMotD -T Digipolis
  WriteLog Verbose Info "FireMotD Elastic theme"
  FireMotD -T Elastic
  WriteLog Verbose Info "FireMotD Eline theme"
  FireMotD -T Eline
  WriteLog Verbose Info "FireMotD Gray theme"
  FireMotD -T Gray
  WriteLog Verbose Info "FireMotD Modern theme"
  FireMotD -T Modern
  WriteLog Verbose Info "FireMotD Original theme"
  FireMotD -T Original
  WriteLog Verbose Info "FireMotD Red theme"
  FireMotD -T Red
}

InitializeArgs () {
  while :; do
    case "$1" in
      -v|--verbose|--Verbose)
        Verbose=1 ; WriteLog Verbose Info "Verbose mode" ; shift ;;
      -d|--debug|--Debug)
        Debug=1  ; WriteLog Debug Info "Debug mode" ; shift ;;
      -V|--version|--Version)
        Action="version" ; shift ;;
      -h|--help|--Help)
        Action="help" ; shift ;;
      -P|--Presentation)
        Action="present" ; shift ;;
      -G|--GenerateCache)
        shift ; Action="caches" ; Theme="$1" ; shift ;;
      -I|--install|--Install)
        Action="install" ; shift ;;
      -s|-S|--save|--Save|--saveupdates|--SaveUpdates|--saveUpdates)
        Action="save" ; shift ;;
      -HV|--hideversion|--HideVersion)
        HideVersion=1 ; shift ;;
      -sru|-SRU|--skiprepoupdate|--SkipRepoUpdate)
        SkipRepoUpdate=1 ; shift ;;
      -T|-t|--Theme|--theme)
        shift ; Action="theme" ; Theme="$1" ; shift ;;
      -D|--Data|--Template)
        shift ; TemplateType="$1" ; shift ;;
      -C|--Colortest|--colortest|--ColorTest|--colorTest)
        Action="colortest" ; shift ;;
      -M|--Colormap|--colormap|--ColorMap|--colorMap)
        Action="colormap" ; shift ;;
      -E|--ExportFile)
        shift ; ExportFile="$1" ; shift ;;
      -TF|--TemplateFile)
        shift ; Action="template" ; Template="$1" ; shift ;;
      -R|--RenderTime)
        shift ; RenderTime="$1" ; shift ;;
      -MT|--MultiThreaded)
        MultiThreaded=1 ; shift ;;
      -*) echo "You specified a non-existant option: $1" ; exit 2 ;;
      *) break ;;
    esac
  done
}

CheckAction () {
  WriteLog Verbose Info "Action \"$Action\""
  case "$Action" in
    version)
      PrintVersion ;;
    help)
      PrintHelp ;;
    install)
      CheckSudo
      InstallFireMotD ;;
    save)
      CheckSudo
      CheckDependencies
      ExportData ;;
    template)
      LoadData
      PrintTemplate ;;
    caches)
      CheckSudo
      GenerateCaches ;;
    theme)
      LoadData
      CheckTheme ;;
    colormap)
      ColorTest 0 ;;
    colortest)
      ColorTest ;;
    present)
      Present ;;
    *)
      WriteLog Output Error "Invalid action: \"$Action\"" ; exit 1 ;;
  esac
  return $?
}

if [[ -z $1 ]] ; then WriteLog Output Error "You should provide an option / parameter. For example try $0 -h" ; exit 2 ; fi
InitializeArgs "$@"
WriteLog Verbose Info "FireMotD action $Action started"
CheckAction
WriteLog Verbose Info "FireMotD action $Action finished"
exit 0
