#!/bin/bash
# Script name:  FireMotD
# Version:      v8.01.170711
# Created on:   10/02/2014
# Author:       Willem D'Haese
# Contributors: Gustavo Neves, Thomas Dietrich, Dmitry Romanenko
# Purpose:      Bash script that will dynamically generate a message
#               of they day for users logging in.
# On GitHub:    https://github.com/willemdh/FireMotD
# On OutsideIT: https://outsideit.net/FireMotD
# Copyright:
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version. This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details. You should have received a copy of the
# GNU General Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

Debug=1
Verbose=1
HideVersion=0
LogLocal=''
UpdateFile='/var/tmp/updatecount.txt'
ExportFile='/var/tmp/FireJson.json'
ScriptPath="$(readlink -f "$0")"
ScriptName="$(basename "$ScriptPath")"
ScriptVersion=" $(< "$ScriptPath" grep "# Version: " | head -n1 | awk '{print $3}' | tr -cd '[:digit:.-]' | sed 's/.\{0\}$//') "
LC_ALL="C"
LC_CTYPE="C"
LC_NUMERIC="C"

WriteLog () {
    if [ ! -z "$ScriptName" ] ; then
        ScriptName="$(basename "$(readlink -f "$0")")"
    fi
    if [ -z "$1" ] ; then
        echo "WriteLog: Log parameter #1 is zero length. Please debug..."
        exit 1
    else
        if [ -z "$2" ] ; then
            echo "WriteLog: Severity parameter #2 is zero length. Please debug..."
            exit 1
        else
            if [ -z "$3" ] ; then
                echo "WriteLog: Message parameter #3 is zero length. Please debug..."
                exit 1
            fi
        fi
    fi
    Now=$(date '+%Y-%m-%d %H:%M:%S,%3N')
    if [ "$1" = "Debug" ] && [ "$Debug" = 1 ] ; then
        echo "$Now: $ScriptName: $2: Debug: $3 "
    elif [ "$1" = "Verbose" ] && [ "$Verbose" = 1 ] ; then
        echo "$Now: $ScriptName: $2: $3"
    elif [ "$1" = "Output" ] ; then
        echo "${Now}: $ScriptName: $2: $3"
    elif [ -f "$1" ] ; then
        echo "${Now}: $ScriptName: $2: $3" >> "$1"
    fi
    if [ ! -z "$LogLocal" ] ; then
        if [ "$1" = "Debug" ] && [ "$Debug" = 1 ] ; then
            echo "$Now: $ScriptName: $2: Debug: $3 " >> "$LogLocal"
        elif [ "$1" = "Verbose" ] && [ "$Verbose" = 1 ] ; then
            echo "$Now: $ScriptName: $2: $3" >> "$LogLocal"
        elif [ "$1" = "Output" ] ; then 
            echo "${Now}: $ScriptName: $2: $3" >> "$LogLocal"
        fi
    fi
}

CountUpdates () {
    if [[ -x "/usr/bin/yum" ]] ; then
        YumExec=$(which yum 2>/dev/null)
        UpdateCount=$(($($YumExec -d 0 check-update 2>/dev/null | wc -l)-1))
        if [ $UpdateCount == -1 ]; then
            UpdateCount=0
        fi
    elif [[ -x "/usr/bin/zypper" ]] ; then
        UpdateCount=$(zypper list-updates | wc -l)
        UpdateCount=$((UpdateCount-4))
    if ((UpdateCount<=0)) ; then
        UpdateCount=0
    fi
    elif [[ -x "/usr/bin/apt-get" ]] ; then
        UpdateCount=$(apt-get update > /dev/null; apt-get upgrade -u -s | grep -c -P "^Inst")
    fi
    echo "$UpdateCount"
    return 0
}

ColorTest () {
    ColorMap=1; [[ (! -z $1) && ($1 -eq 0) ]] && ColorMap=0
    echo -n -e "\n\e[1mYour terminal \e[4mdoes not\e[24m support 256 colors if:\e[0m\n"
    echo " * The Color Cube colors are the same as System Colors"
    echo " * Your gray scale ramp has only 3 variations"
    echo -n -e "\nSystem colors:\n"
    for code in {0..15}; do
        ds="  "
        if [[ $ColorMap -eq 0 ]]; then
            [[ $code -lt 10 ]] && ds=" $code  " || ds=" $code "
        fi
        echo -n -e "\e[48;05;${code}m${ds}"
        [[ ($code -eq 7) || ($code -eq 15) ]] && echo -n -e "\e[0m\n"
    done
    tcolor=255
    echo -n -e "\nColor cube, 6x6x6:\n"
    for green in {0..5}; do
        for red in {0..5}; do
            for blue in {0..5}; do
                color=$((16 + (red * 36) + (green * 6) + blue));
                ds="  "
                if [[ $ColorMap -eq 0 ]]; then
                    [[ $color -lt 100 ]] && ds="$color  " || ds="$color "
                fi
                echo -n -e "\e[38;05;${tcolor}m\e[48;05;${color}m${ds}"
            done
            echo -n -e "\e[0m "
        done
        echo -n -e "\e[0m\n"
        tcolor=0
    done
    tcolor=255
    echo -n -e "\nGrayscale ramp:\n"
    for gray in {232..255}; do
        [[ $gray -gt 245 ]] && tcolor=0
        ds="  "
        [[ $ColorMap -eq 0 ]] && ds=" $gray "
        echo -n -e "\e[38;05;${tcolor}m\e[48;05;${gray}m${ds}"
    done
    echo -e "\e[0;37m\e[0m\n"
}

ContainsValidIp () {
    WriteLog Verbose Info "Checking if $1 contains an ip"
    local  ip=$1
    local  stat=1
    Extract=$(echo "$ip" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
    WriteLog Verbose Info "Extract: $Extract"
    if [[ $Extract =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        Extract=($Extract)
        IFS=$OIFS
        [[ ${Extract[0]} -le 255 && ${Extract[1]} -le 255 && ${Extract[2]} -le 255 && ${Extract[3]} -le 255 ]]
        stat=$?
        WriteLog Verbose Info "Match result: $?"
    fi
    return $stat
}

GetSessions () {
    WriteLog Verbose Info "Output who: $(who)"
    WriteLog Verbose Info "Output who: $(who | cut -d' ' -f1,14)"
    SessionCount="$(who | cut -d' ' -f1,12 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
    WriteLog Verbose Info "SessionCount 1: f1,12: $SessionCount"
    CleanSessionHost=$(echo $SessionCount  | cut -d, -f2 | cut -d@ -f2- | cut -d@ -f2- )
    WriteLog Verbose Info "CleanSessionhost: $CleanSessionHost"
    RegexHost="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.){6,}*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]){6,}$"
    if ! ContainsValidIp $SessionCount ; then
        WriteLog Verbose Info "SessionCount $SessionCount does not contain an ip address. "
        if ! [[ "$CleanSessionHost" =~ $RegexHost ]] ; then
            WriteLog Verbose Info "CleanSessionHost $CleanSessionHost does not contain a hostname. "
            SessionCount="$(who | cut -d' ' -f1,13 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
            WriteLog Verbose Info "SessionCount 2: f1,13: $SessionCount"
            if ! ContainsValidIp $SessionCount && ! [[ "$CleanSessionHost" =~ $RegexHost ]] ; then
                SessionCount="$(who | cut -d' ' -f1,14 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
                WriteLog Verbose Info "SessionCount 3: f1,14: $SessionCount"
            fi
        else
            SessionCount="$(who | cut -d' ' -f1,12 | tr ' ' @ | tr '\n' ',' | tr -d '()' | rev | cut -c 2- | rev)"
            WriteLog Verbose Info "CleanSessionHost $CleanSessionHost contains a hostname. "
        fi
    else
        WriteLog Verbose Info "SessionCount $SessionCount contains an ip address. "
    fi
}

ExportData () {
    if [[ ! -s "$ExportFile" ]] ; then
        echo '{
  "version": {
    "Generated": "@logon",
    "Value": "Unknown",
    "LastRun": "Never"
  },
  "hostname": {
    "Generated": "@logon",
    "Value": "Unknown",
    "LastRun": "Never"
  },
  "hostip": {
    "Generated": "@logon",
    "Value": "Unknown",
    "LastRun": "Never"
  }
}' > $ExportFile
    fi
    ExportTime=$(date '+%Y-%m-%d %H:%M:%S,%3N')
    WriteLog Verbose Info "Info - Exporting data to json"
    HostName="$(hostname)"
    WriteLog Verbose Info "Info - Showing original ExportFile"
    cat "$ExportFile"
    WriteLog Verbose Info "Info - Writing ScriptVersion to ExportFile"
    jq ".version.Value = \"$ScriptVersion\"" $ExportFile | sponge $ExportFile
    jq ".version.LastRun = \"$ExportTime\"" $ExportFile | sponge $ExportFile
    WriteLog Verbose Info "Info - Writing HostName to ExportFile"
    jq ".hostname.Value = \"$HostName\"" $ExportFile | sponge $ExportFile
    jq ".hostname.LastRun = \"$ExportTime\"" $ExportFile | sponge $ExportFile
    WriteLog Verbose Info "Info - HostIp"
    IpPath="$(which ip 2>/dev/null)"
    WriteLog Debug Info "IpPath: $IpPath"
    if [ -z "$IpPath" ] ; then
        if [ -f /usr/sbin/ip ] ; then
            IpPath="/usr/sbin/ip"
        elif [ -f /sbin/ip ] ; then
            IpPath="/sbin/ip"
        else
            WriteLog Verbose Warning "Path doesn't contain ip tool"
        fi
    fi
    if [ ! -z $IpPath ] ; then
        HostIp="$(${IpPath} route get 8.8.8.8 | head -1 | cut -d' ' -f8)"
        if [[ ! $HostIp =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            HostIp="$(${IpPath} route get 8.8.8.8 | head -1 | awk -F' ' '{print $(NF)}')"
        fi
        if [[ ! $HostIp =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            HostIp="Unable to parse ip. Please debug."
        fi
    else
        HostIp="Unable to use ip route. Please debug."
    fi
    jq ".hostip.Value = \"$HostIp\"" $ExportFile | sponge $ExportFile
    jq ".hostip.LastRun = \"$ExportTime\"" $ExportFile | sponge $ExportFile
    WriteLog Verbose Info "Info - Showing updated ExportFile"
    cat $ExportFile

}

GatherInfo () {
    WriteLog Verbose Info "Info - HostName"
    MaxLeftOverChars=35
    HostName="$(hostname)"
    HostChars=$((${#HostName} + 8))
    if (( HostChars > 47 )); then
        HostName=${HostName:0:39}
        HostChars=47
    fi
    LeftoverChars=$((MaxLeftOverChars - HostChars -10))
    (( $LeftoverChars <= 0 )) && LeftoverChars=0
    WriteLog Verbose Info "Info - HostName: $HostName"
    WriteLog Verbose Info "Info - HostIp"
    IpPath="$(which ip 2>/dev/null)"
    WriteLog Debug Info "IpPath: $IpPath"
    if [ -z "$IpPath" ] ; then
        if [ -f /usr/sbin/ip ] ; then
            IpPath="/usr/sbin/ip"
        elif [ -f /sbin/ip ] ; then
            IpPath="/sbin/ip"
        else
            WriteLog Verbose Warning "Path doesn't contain ip tool"
        fi
    fi
    if [ ! -z $IpPath ] ; then
        HostIp="$(${IpPath} route get 8.8.8.8 | head -1 | cut -d' ' -f8)"
        if [[ ! $HostIp =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            HostIp="$(${IpPath} route get 8.8.8.8 | head -1 | awk -F' ' '{print $(NF)}')"
        fi
        if [[ ! $HostIp =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            HostIp="Unable to parse ip. Please debug."
        fi
    else
        HostIp="Unable to use ip route. Please debug."
    fi
    if [ -f /sys/hypervisor/uuid ] && [ "$(head -c 3 /sys/hypervisor/uuid)" == ec2 ]; then
        CurlExec=$(which curl 2>/dev/null)
        WgetExec=$(which wget 2>/dev/null)
        if [[ (-f $CurlExec) && (-x $CurlExec) ]]; then
            HostIp=$($CurlExec -s http://instance-data/latest/meta-data/public-ipv4)
        elif [[ (-f $WgetExec) && (-x $WgetExec) ]]; then
            HostIp=$($WgetExec -qO- http://instance-data/latest/meta-data/public-ipv4)
        fi
    fi
    WriteLog Verbose Info "Info - HostIp: $HostIp"
    WriteLog Verbose Info "Info - Release"
    ReleaseFull="$(cat /etc/*release)"
    Release="$(echo "$ReleaseFull" | head -n 1)"
    if [[ "$Release" == "SUSE"* ]] ; then
        Release=${Release%% \(*}
        PatchLevel="$(cat /etc/*release | sed -n 3p | sed 's/.*= //')"
        Release="${Release}.$PatchLevel"
    elif [[ "$Release" == "openSUSE"* ]] ; then
        Release="$(< /etc/os-release sed -n 4p | sed 's/PRETTY_NAME="//' | sed 's/ (.*//')"
    elif [[ "$Release" == *"Raspbian"* ]] ; then
        Release="$(echo "$ReleaseFull" | head -n 1 | sed 's/.*"\(.*\)"[^"]*$/\1/')"
    elif [[ "$ReleaseFull" == *"PRETTY_NAME"* ]] ; then
        Release="$(echo "$ReleaseFull" | grep 'PRETTY_NAME' | cut -f2 -d'"')"
    elif [[ "$ReleaseFull" == *"DISTRIB_DESCRIPTION"* ]] ; then
        Release="$(echo "$ReleaseFull" | grep 'DISTRIB_DESCRIPTION' | cut -f2 -d'"')"
    fi
    WriteLog Verbose Info "Info - Release: $Release"
    Kernel="$(uname -rs)"
    UptimeDays=$(awk '{print int($1/86400)}' /proc/uptime)
    UptimeHours=$(awk '{print int($1%86400/3600)}' /proc/uptime)
    UptimeMinutes=$(awk '{print int(($1%3600)/60)}' /proc/uptime)
    UptimeSeconds=$(awk '{print int($1%60)}' /proc/uptime)
    RpmPath="$(which rpm 2>/dev/null)"
    if [[ (-f $RpmPath) && (-x $RpmPath) ]] ; then    
        InstallDate=$(rpm -qi basesystem | grep "Install Date" | sed 's/Install Date: //g' | sed 's/Build Host: .*//g')
    fi
    Dmesg="$(dmesg 2>/dev/null)"
    Dmi="$(echo "$Dmesg" | grep "DMI:")"
    Rasp="$(echo "$Dmesg" | grep "Raspberry")"
    Xen="$(echo "$Dmesg" | grep -i 'xen version')"
    [[ -f "/proc/1/comm" ]] && InitSystem="$(cat /proc/1/comm)"
    if [[ "$Dmi" = *"QEMU"* ]] ; then
        Platform="$(echo "$Dmi" | sed 's/^.*QEMU/QEMU/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"VMware"* ]] ; then
        Platform="$(echo "$Dmi" | sed 's/^.*VMware/VMware/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"FUJITSU PRIMERGY"* ]] ; then
        Platform="$(echo "$Dmi" | sed 's/^.*FUJITSU PRIMERGY/Fujitsu Primergy/' | sed 's/, B.*//')"
    elif [[ "$Dmi" = *"VirtualBox"* ]] ; then
        Platform="$(echo "$Dmi" | sed 's/^.*VirtualBox/VirtualBox/' | sed 's/ .*//')"
    elif [[ "$Dmi" = *"DMI:"* ]] ; then
            Platform="$(echo "$Dmi" | sed -n -e 's/^.*DMI: //p')"
    elif [[ "$Dmi" = *"klogctl"* ]] ; then
            Platform="Windows Subsytem for Linux"
    elif [[ "$Xen" = *"Xen version"* ]] ; then
            Platform="Xen Hypervisor v""$(echo "$Xen" | sed -n -e 's/^.*Xen version: //p')"
    elif [[ "$Rasp" = *"Rasp"* ]] ; then
            Platform=${Rasp//*: /}
    elif [[ $(uname -r) =~ "pine64-longsleep" ]] ; then
            Platform="Pine A64"
            _mem="$(< /proc/meminfo grep MemTotal | awk '{print $2}')"
            if [ $_mem -gt  500000 ] && [ $_mem -gt  503000 ]; then Platform="Pine A64 512MB Rev B Board"; fi
            if [ $_mem -gt 1000000 ] && [ $_mem -gt 1006000 ]; then Platform="Pine A64+ 1GB Rev B Board"; fi
            if [ $_mem -gt 2000000 ] && [ $_mem -gt 2012000 ]; then Platform="Pine A64+ 2GB Rev C Board"; fi
    elif [[ $(uname -r) =~ "Microsoft" ]] ; then
        Platform="Windows Subsystem for Linux"
    elif [[ "$InitSystem" == "systemd" ]] ; then
        Custom="$(systemd-detect-virt)"
        if [[ ! -z $Custom ]] ; then
            if [[ "$Custom" = *"openvz"* ]] ; then
                Platform="OpenVZ"
            elif [[ "$Custom" = *"vmware"* ]] ; then
                Platform="VMware Virtual Platform"
            else
                Platform=$Custom
            fi
        else
            Platform="Unknown"
        fi
    else
        Platform="Unknown"
    fi
    CpuUtil="$(LANG=en_GB.UTF-8 mpstat 1 1 | awk '$2 ~ /CPU/ { for(i=1;i<=NF;i++) { if ($i ~ /%idle/) field=i } } $2 ~ /all/ { print 100 - $field}' | tail -1)"
    CpuProc="$(< /proc/cpuinfo grep -c processor)"
    WriteLog Verbose Info "CpuProc: $CpuProc"
    if [[ "$Platform" == "OpenVZ" ]] ; then
        CoreCount="$(cat /proc/cpuinfo | grep "processor" | sort -u | wc -l)"
    else
        CoreCount="$(lscpu | grep 'Core(s) per socket:' | head -1 | awk -F " " '{print $4}')"
    fi
    WriteLog Verbose Info "CoreCount: $CoreCount"

    if [[ "$Platform" == "OpenVZ" ]] ; then
        SocketCount="$(cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l)"
    else
        SocketCount="$(lscpu | grep 'Socket(s):' | head -1 | awk -F " " '{print $2}')"
    fi
 
    WriteLog Verbose Info "SocketCount: $SocketCount"
    CpuLoad="$(uptime | grep -ohe '[s:][: ].*' | awk '{print "1m: "$2 " 5m: "$3 " 15m: " $4}')"
    MemFreeB="$(< /proc/meminfo grep MemFree | awk '{print $2}')"
    MemTotalB="$(< /proc/meminfo grep MemTotal | awk '{print $2}')"
    MemUsedB="$((MemTotalB - MemFreeB))"
    MemFree="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemFreeB"/1024/1024)")"
    WriteLog Verbose Info "MemFree: $MemFree"
    MemUsed="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemUsedB"/1024/1024)")"
    WriteLog Verbose Info "MemUsed: $MemUsed"
    MemTotal="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$MemTotalB"/1024/1024)")"
    WriteLog Verbose Info "MemTotal: $MemTotal"
    MemFreePerc=$(echo "scale=2; $MemFree*100/$MemTotal" | bc)
    MemFreePerc="$(LC_NUMERIC=C printf "%.0f" "$MemFreePerc")"
    WriteLog Verbose Info "MemFreePerc: $MemFreePerc"
    MemUsedPerc=$(echo "100-$MemFreePerc" | bc)
    WriteLog Verbose Info "MemUsedPerc: $MemUsedPerc"
    SwapFreeB="$(< /proc/meminfo grep SwapFree | awk '{print $2}')"
    SwapTotalB="$(< /proc/meminfo grep SwapTotal | awk '{print $2}')"
    SwapUsedB="$((SwapTotalB - SwapFreeB))"
    SwapFree="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$SwapFreeB"/1024/1024)")"
    SwapFreePerc=$(echo "scale=2; $SwapFreeB*100/$SwapTotalB" | bc  2> /dev/null)
    SwapFreePerc="$(LC_NUMERIC=C printf "%.0f" "$SwapFreePerc")"
    SwapUsed="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;$SwapUsedB/1024/1024)")"
    SwapUsedPerc=$(echo "100-$SwapFreePerc" | bc)
    SwapTotal="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$SwapTotalB"/1024/1024)")"
    RootFreeB="$(df -kP / | tail -1 | awk '{print $4}')"
    RootUsedB="$(df -kP / | tail -1 | awk '{print $3}')"
    RootTotalB="$(df -kP / | tail -1 | awk '{print $2}')"
    RootFree="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$RootFreeB"/1024/1024)")"
    RootUsed="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$RootUsedB"/1024/1024)")"
    RootTotal="$(printf "%0.2f\n" "$(bc -q <<< scale=2\;"$RootTotalB"/1024/1024)")"
    RootUsedPerc="$(df -kP / | tail -1 | awk '{print $5}'| sed s'/%$//')"
    RootFreePerc="$((100 - RootUsedPerc))" 
    UpdateCount="Unknown"
    [[ -f $UpdateFile ]] && UpdateCount="$(cat $UpdateFile)"
    SessionCount="$(who | grep -c "$USER") sessions"
    ProcessCount="$(ps -A --no-headers | wc -l)"
    SysctlPath="$(which sysctl 2>/dev/null)"
    if [ -z "$SysctlPath" ] ; then
        if [ -f /usr/sbin/sysctl ] ; then
            SysctlPath="/usr/sbin/sysctl"
        elif [ -f /sbin/sysctl ] ; then
            SysctlPath="/sbin/sysctl"
        else
            WriteLog Verbose Warning "Path doesn't contain sysctl tool"
        fi
    fi
    WriteLog Verbose Info "SysctlPath: $SysctlPath"
    ProcessMax="$($SysctlPath -n kernel.pid_max)"
    PhpVersion="$(/usr/bin/php -v 2>/dev/null | grep -oE '^PHP\s[0-9]+\.[0-9]+\.[0-9]+' | awk '{ print $2}')"
    if [ -f /etc/php.ini ] ; then
        PhpIniPath="/etc/php.ini"
    elif [ -f /etc/php5/fpm/php.ini ] ; then
        PhpIniPath="/etc/php5/fpm/php.ini"
    fi
    if [ -n "$PhpIniPath" ] ; then
        PhpMaxMemory=$(tac $PhpIniPath | grep -F -m 1 memory_limit | sed -n 's/.* = \([0-9]*\)/\1/p' | sed 's/; .*//g')
        if [[ "$PhpMaxMemory" == "-1" ]]; then
            PhpMaxMemory="Unlimited"
        fi
    fi
    if [[ -x "/usr/bin/yum" ]] ; then
        UpdateType="yum"
    elif [[ -x "/usr/bin/zypper" ]] ; then
        UpdateType="zypper"
    elif [[ -x "/usr/bin/apt-get" ]] ; then
        UpdateType="apt-get"
    fi   
    WriteLog Verbose Info "UpdateType: $UpdateType"
    HttpdPath="$(which httpd 2>/dev/null)"
    [[ ! -f $HttpdPath ]] && HttpdPath="/usr/sbin/apache2ctl"
    [[ ! -f $HttpdPath ]] && HttpdPath="/usr/sbin/apache2"
    WriteLog Verbose Info "HttpdPath: $HttpdPath"
    if [[ (-f $HttpdPath) && (-x $HttpdPath) ]] ; then
        HttpdVersion="$(${HttpdPath} -v 2>/dev/null | grep "Server version" | sed -e 's/.*[^0-9]\([0-9].[0-9]\+.[0-9]\+\)[^0-9]*$/\1/')"
        WriteLog Verbose Info "HttpdVersion: $HttpdVersion"
    fi
    nginxVersion=""
    nginxPath="$(which nginx 2>/dev/null)"
    WriteLog Verbose Info "nginxPath: $nginxPath"
    if [[ (-f $nginxPath) && (-x $nginxPath) ]] ; then
        nginxString="$(${nginxPath} -v 2>&1)"
        nginxVersion="$(echo "$nginxString" | awk -F"/" '{print $2}')"
        WriteLog Verbose Info "nginxVersion: $nginxVersion"
    fi    
    MySqlVersion=""
    MySqlDistribution=""
    MySqlPath="$(which mysql 2>/dev/null)"
    WriteLog Verbose Info "MySqlPath: $MySqlPath"
    if [[ (-f $MySqlPath) && (-x $MySqlPath) ]] ; then
        MySqlString="$(${MySqlPath} --version 2>/dev/null)"
        MySqlVersion="$(echo "$MySqlString" | awk '{print $3}')"
        MySqlDistribution="$(echo "$MySqlString" | awk '{print $5}' | tr -d ',')"
        WriteLog Verbose Info "MySqlVersion: $MySqlVersion Distr: $MySqlDistribution"
    fi
    PostgreSqlVersion=""
    PostgreSqlPath="$(which psql 2>/dev/null)"
    WriteLog Verbose Info "PostgreSqlPath: $PostgreSqlPath"
    if [[ (-f $PostgreSqlPath) && (-x $PostgreSqlPath) ]] ; then
        PostgreSqlString="$(${PostgreSqlPath} --version 2>/dev/null)"
        PostgreSqlVersion="$(echo "$PostgreSqlString"  | head -n1 | awk '{print $3}')"
        WriteLog Verbose Info "PostgreSqlVersion: $PostgreSqlVersion"
    fi
    WriteLog Verbose Info "All information gathered successfully. " 
}

StartOrangeTheme () {
    WriteLog Verbose Info "Function StartOrangeTheme started. "                                 
    C1C=$(( 79 - 4 - 10 - HostChars - 4 ))                                                    
    WriteLog Verbose Info "Row 1 Rest Chars: $C1C"                                            
    C2C=$(( 79 - 4 - 4 - 9 - HostChars - 9 - 6 ))                                             
    WriteLog Verbose Info "Row 2 Rest Chars: $C2C"                                            
    CZC=$(( 79 - 4 - 4 ))                                                                     
    WriteLog Verbose Info "Row Z Rest Chars: $CZC"                                            
    # Color Part 1                                                                            
    CP1="\e[38;5;202m##"                                                                      
    # Color Row 1 Part 2                                                                      
    CP12="\e[38;5;208m##########"                                                             
    # Color Row 1 Host                                                                        
    CP1H="\e[38;5;214m$(head -c $HostChars /dev/zero|tr '\0' '#')"                            
    # Color Row 1 Rest                                                                        
    C1R="\e[38;5;208m$(head -c $C1C /dev/zero|tr '\0' '#')"                                   
    # Color Row 2 Part 2                                                                      
    CP22="\e[38;5;208m####"                                                                   
    # Color Row 2 Part 3                                                                      
    CP23="\e[38;5;214m#########"                                                              
    # Color Row 2 Host                                                                        
    CP2H="\e[38;5;226m$(head -c $LeftoverChars /dev/zero|tr '\0' '#')"                        
    # Color Row 2 Rest                                                                        
    C2R="\e[38;5;208m$(head -c $C2C /dev/zero|tr '\0' '#')"                                   
    # Color Row Z Rest                                                                        
    CZR="\e[38;5;208m$(head -c $CZC /dev/zero|tr '\0' '#')"                                   
    # Equal Scheme                                                                            
    ES="\e[38;5;226m="                                                                         
    # Host Color                                                                              
    HC="\e[38;5;202m"                                                                         
    # Value Color                                                                             
    VC="\e[38;5;208m"                                                                         
    # Highlight Color                                                                         
    VCL="\e[38;5;202m"                                                                        
    # Key Color                                                                               
    KS="\e[38;5;214m"                                                                         
    # Version Color                                                                           
    SVC="\e[38;5;130m"                                                                        
    WriteLog Verbose Info "Function StartOrangeTheme finished successfully. " 
}

StartGrayTheme () {
    WriteLog Verbose Info "Function StartGrayTheme started. "
    C1C=$(( 79 - 4 - 10 - HostChars - 4 ))
    WriteLog Verbose Info "Row 1 Rest Chars: $C1C"
    C2C=$(( 79 - 4 - 4 - 9 - HostChars - 9 - 6 ))
    WriteLog Verbose Info "Row 2 Rest Chars: $C2C"
    CZC=$(( 79 - 4 - 4 ))
    WriteLog Verbose Info "Row Z Rest Chars: $CZC"
    # Color Part 1
    CP1="\e[38;5;252m##"
    # Color Row 1 Part 2
    CP12="\e[38;5;243m##########"
    # Color Row 1 Host
    CP1H="\e[38;5;233m$(head -c $HostChars /dev/zero|tr '\0' '#')"
    # Color Row 1 Rest
    C1R="\e[38;5;243m$(head -c $C1C /dev/zero|tr '\0' '#')"
    # Color Row 2 Part 2
    CP22="\e[38;5;233m####"
    # Color Row 2 Part 3
    CP23="\e[38;5;233m#########"
    # Color Row 2 Host
    CP2H="\e[38;5;233m$(head -c $LeftoverChars /dev/zero|tr '\0' '#')"
    # Color Row 2 Rest
    C2R="\e[38;5;243m$(head -c $C2C /dev/zero|tr '\0' '#')"
    # Color Row Z Rest
    CZR="\e[38;5;243m$(head -c $CZC /dev/zero|tr '\0' '#')"
    # Equal Scheme
    ES="\e[38;5;15m="
    # Host Color
    HC="\e[38;5;250m"
    # Value Color
    VC="\e[38;5;248m"
    # Highlight Color
    VCL="\e[38;5;254m"
    # Key Color
    KS="\e[38;5;242m"
    # Version Color
    SVC="\e[38;5;240m"
    WriteLog Verbose Info "Function StartGrayTheme finished successfully. "
}

StartBlueTheme () {
    WriteLog Verbose Info "Function StartBlueTheme started. "
    C1C=$(( 79 - 4 - 10 - HostChars - 4 ))
    WriteLog Verbose Info "Row 1 Rest Chars: $C1C"
    C2C=$(( 79 - 4 - 4 - 9 - HostChars - 9 - 6 ))
    WriteLog Verbose Info "Row 2 Rest Chars: $C2C"
    CZC=$(( 79 - 4 - 4 ))
    WriteLog Verbose Info "Row Z Rest Chars: $CZC"
    # Color Part 1
    CP1="\e[0;34m##"
    # Color Row 1 Part 2
    CP12="\e[1;34m##########"
    # Color Row 1 Host
    CP1H="\e[1;36m$(head -c $HostChars /dev/zero|tr '\0' '#')"
    # Color Row 1 Rest
    C1R="\e[1;34m$(head -c $C1C /dev/zero|tr '\0' '#')"
    # Color Row 2 Part 2
    CP22="\e[1;34m####"
    # Color Row 2 Part 3
    CP23="\e[1;36m#########"
    # Color Row 2 Host
    CP2H="\e[1;36m$(head -c $LeftoverChars /dev/zero|tr '\0' '#')"
    # Color Row 2 Rest
    C2R="\e[1;34m$(head -c $C2C /dev/zero|tr '\0' '#')"
    # Color Row Z Rest
    CZR="\e[1;34m$(head -c $CZC /dev/zero|tr '\0' '#')"
    # Equal Scheme
    ES="\e[1;34m="
    # Host Color
    HC="\e[1;32m"
    # Value Color
    VC="\e[0;32m"
    # Highlight Color
    VCL="\e[1;32m"
    # Key Color
    KS="\e[1;33m"
    # Version Color
    SVC="\e[1;36m"
    WriteLog Verbose Info "Function StartBlueTheme finished successfully. "
}

StartRedTheme () {
    WriteLog Verbose Info "Function StartRedTheme started. "
    C1C=$(( 79 - 4 - 10 - HostChars - 4 ))
    WriteLog Verbose Info "Row 1 Rest Chars: $C1C"
    C2C=$(( 79 - 4 - 4 - 9 - HostChars - 9 - 6 ))
    WriteLog Verbose Info "Row 2 Rest Chars: $C2C"
    CZC=$(( 79 - 4 - 4 ))
    WriteLog Verbose Info "Row Z Rest Chars: $CZC"
    # Color Part 1
    CP1="\e[0;31m##"
    # Color Row 1 Part 2
    CP12="\e[1;31m##########"
    # Color Row 1 Host
    CP1H="\e[1;33m$(head -c $HostChars /dev/zero|tr '\0' '#')"
    # Color Row 1 Rest
    C1R="\e[1;31m$(head -c $C1C /dev/zero|tr '\0' '#')"
    # Color Row 2 Part 2
    CP22="\e[1;31m####"
    # Color Row 2 Part 3
    CP23="\e[1;33m#########"
    # Color Row 2 Host
    CP2H="\e[2;31m$(head -c $LeftoverChars /dev/zero|tr '\0' '#')"
    # Color Row 2 Rest
    C2R="\e[1;31m$(head -c $C2C /dev/zero|tr '\0' '#')"
    # Color Row Z Rest
    CZR="\e[1;31m$(head -c $CZC /dev/zero|tr '\0' '#')"
    # Equal Scheme
    ES="\e[1;31m="
    # Host Color
    HC="\e[1;37m"
    # Value Color
    VC="\e[0;33m"
    # Highlight Color
    VCL="\e[1;33m"
    # Key Color
    KS="\e[0;37m"
    # Version Color
    SVC="\e[1;33m"
    WriteLog Verbose Info "Function StartRedTheme finished successfully. "
}

StartOriginalBlue () {
    for i in {18..21} {21..18} ; do ShortBlueScheme+="\e[38;5;${i}m#\e[0m"  ; done ;
    for i in {17..21} {21..17} ; do BlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m"  ; done ;
    for i in {17..21} {21..17} ; do LongBlueScheme+="\e[38;5;${i}m#\e[0m\e[38;5;${i}m#\e[0m\e[38;5;${i}m#"  ; done ;
}

GenerateOriginal256Color () {
    Space=""
    if [[ "$Theme" == "Modern" ]] ; then
        Space="                              "
        Fto="  "
    else
        Fto="##"
    fi

    shownVersion=""
    if [[ "$HideVersion" -eq 1 ]]; then
        shownVersion="$CP1$CP1$CP1$CP1$CP1$CP1"
    else
        shownVersion="$ScriptVersion"
    fi

    echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme
$BlueScheme \e[38;5;93m $HostName $BlueScheme $Space\e[38;5;98m$SVC$shownVersion
$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme
\e[0;38;5;17m$Fto          \e[38;5;39mIp \e[38;5;93m= \e[38;5;33m$HostIp
\e[0;38;5;17m$Fto     \e[38;5;39mRelease \e[38;5;93m= \e[38;5;27m$Release
\e[0;38;5;17m$Fto      \e[38;5;39mKernel \e[38;5;93m= \e[38;5;27m$Kernel
\e[0;38;5;17m$Fto    \e[38;5;39mPlatform \e[38;5;93m= \e[38;5;27m$Platform
\e[0;38;5;17m$Fto      \e[38;5;39mUptime \e[38;5;93m= \e[38;5;33m${UptimeDays} \e[38;5;27mday(s). \e[38;5;33m${UptimeHours}\e[38;5;27m:\e[38;5;33m${UptimeMinutes}\e[38;5;27m:\e[38;5;33m${UptimeSeconds}"
    if [[ ! -z $InstallDate ]] ; then
        echo -e "\e[0;38;5;17m$Fto   \e[38;5;39mInstalled \e[38;5;93m= \e[38;5;27m$InstallDate"
    fi
echo -e "\e[0;38;5;17m$Fto   \e[38;5;39mCPU Usage \e[38;5;93m= \e[38;5;33m${CpuUtil}\e[38;5;27m% avg over \e[38;5;33m$CpuProc \e[38;5;27mcpu(s) ($CoreCount core(s) x $SocketCount socket(s))
\e[0;38;5;17m$Fto    \e[38;5;39mCPU Load \e[38;5;93m= \e[38;5;27m$CpuLoad
\e[0;38;5;17m$Fto      \e[38;5;39mMemory \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${MemFree}\e[38;5;27mGB (\e[38;5;33m$MemFreePerc\e[38;5;27m%), Used: \e[38;5;33m${MemUsed}\e[38;5;27mGB (\e[38;5;33m$MemUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${MemTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto        \e[38;5;39mSwap \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${SwapFree}\e[38;5;27mGB (\e[38;5;33m$SwapFreePerc\e[38;5;27m%), Used: \e[38;5;33m${SwapUsed}\e[38;5;27mGB (\e[38;5;33m$SwapUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${SwapTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto        \e[38;5;39mRoot \e[38;5;93m= \e[38;5;27mFree: \e[38;5;33m${RootFree}\e[38;5;27mGB (\e[38;5;33m$RootFreePerc\e[38;5;27m%), Used: \e[38;5;33m${RootUsed}\e[38;5;27mGB (\e[38;5;33m$RootUsedPerc\e[38;5;27m%), Total: \e[38;5;33m${RootTotal}\e[38;5;27mGB
\e[0;38;5;17m$Fto     \e[38;5;39mUpdates \e[38;5;93m= \e[38;5;33m$UpdateCount\e[38;5;27m ${UpdateType} updates available
\e[0;38;5;17m$Fto    \e[38;5;39mSessions \e[38;5;93m= \e[38;5;33m$SessionCount\e[38;5;27m
\e[0;38;5;17m$Fto   \e[38;5;39mProcesses \e[38;5;93m= \e[38;5;33m$ProcessCount\e[38;5;27m running processes of \e[38;5;33m$ProcessMax\e[38;5;27m maximum processes"
    if [[ $HttpdVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "\e[0;38;5;17m$Fto      \e[38;5;39mApache \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$HttpdVersion"
    fi
    if [[ ! -z $nginxVersion ]] ; then
        echo -e "\e[0;38;5;17m$Fto       \e[38;5;39mnginx \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$nginxVersion"
    fi
    if [[ ! -z $MySqlVersion ]] ; then
        echo -e "\e[0;38;5;17m$Fto       \e[38;5;39mMySQL \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$MySqlVersion \e[38;5;27mDistribution: \e[38;5;33m$MySqlDistribution"
    fi
    if [[ ! -z $PostgreSqlVersion ]] ; then
        echo -e "\e[0;38;5;17m$Fto  \e[38;5;39mPostgreSQL \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$PostgreSqlVersion"
    fi
    if [[ $PhpVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "\e[0;38;5;17m$Fto         \e[38;5;39mPHP \e[38;5;93m= \e[38;5;27mVersion: \e[38;5;33m$PhpVersion, \e[38;5;27mMemory Limit: \e[38;5;33m$PhpMaxMemory"
    fi    
    echo -e "$BlueScheme$LongBlueScheme$BlueScheme$ShortBlueScheme\e[0;37m"
}

GenerateBasic16Color () {
    WriteLog Verbose Info "Generating 16 color MotD"
    shownVersion=""
    if [[ "$HideVersion" -eq 1 ]]; then
        shownVersion="$CP1$CP1$CP1$CP1$CP1$CP1"
    else
        shownVersion="$ScriptVersion"
    fi

    echo -e "$CP1$CP1$CP12$CP1H$C1R$CP1$CP1
$CP1$CP1$CP22$CP23 $HC$HostName $CP23$C2R$SVC$shownVersion
$CP1$CP1$CP12$CP1H$C1R$CP1$CP1
$CP1        ${KS}Ip $ES ${VCL}$HostIp
$CP1   ${KS}Release $ES ${VC}$Release
$CP1    ${KS}Kernel $ES ${VC}$Kernel
$CP1  ${KS}Platform $ES ${VC}$Platform
$CP1    ${KS}Uptime $ES ${VCL}${UptimeDays} ${VC}day(s). ${VCL}${UptimeHours}${VC}:${VCL}${UptimeMinutes}${VC}:${VCL}${UptimeSeconds}"
    if [[ ! -z $InstallDate ]] ; then
        echo -e "$CP1 ${KS}Installed $ES ${VC}$InstallDate"
    fi
echo -e "$CP1 ${KS}CPU Usage $ES ${VCL}$CpuUtil ${VC}% avg over ${VCL}${CpuProc}${VC} cpu(s)  ($CoreCount core(s) x $SocketCount socket(s))
$CP1  ${KS}CPU Load $ES ${VC}$CpuLoad
$CP1    ${KS}Memory $ES ${VC}Free: ${VCL}${MemFree}${VC}GB (${VCL}$MemFreePerc${VC}%), Used: ${VCL}${MemUsed}${VC}GB (${VCL}$MemUsedPerc${VC}%), Total: ${VCL}${MemTotal}${VC}GB
$CP1      ${KS}Swap $ES ${VC}Free: ${VCL}${SwapFree}${VC}GB (${VCL}$SwapFreePerc${VC}%), Used: ${VCL}${SwapUsed}${VC}GB (${VCL}$SwapUsedPerc${VC}%), Total: ${VCL}${SwapTotal}${VC}GB
$CP1      ${KS}Root $ES ${VC}Free: ${VCL}${RootFree}${VC}GB (${VCL}$RootFreePerc${VC}%), Used: ${VCL}${RootUsed}${VC}GB (${VCL}$RootUsedPerc${VC}%), Total: ${VCL}${RootTotal}${VC}GB
$CP1   ${KS}Updates $ES ${VCL}$UpdateCount${VC} ${UpdateType} updates available.
$CP1  ${KS}Sessions $ES ${VCL}$SessionCount
$CP1 ${KS}Processes $ES ${VCL}$ProcessCount ${VC}running processes of ${VCL}$ProcessMax ${VC}maximum processes"
    if [[ $HttpdVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "$CP1    ${KS}Apache $ES ${VC}Version: ${VCL}$HttpdVersion"
    fi
    if [[ ! -z $nginxVersion ]] ; then
        echo -e "$CP1     ${KS}Nginx $ES ${VC}Version: ${VCL}$nginxVersion"
    fi
    if [[ ! -z $MySqlVersion ]] ; then
        echo -e "$CP1     ${KS}MySQL $ES ${VC}Version: ${VCL}$MySqlVersion ${VC}Distribution: ${VCL}$MySqlDistribution"
    fi
    if [[ ! -z $PostgreSqlVersion ]] ; then
        echo -e "$CP1  ${KS}Postgres $ES ${VC}Version: ${VCL}$PostgreSqlVersion"
    fi
    if [[ $PhpVersion =~ ^[0-9.]+$ ]] ; then
        echo -e "$CP1       ${KS}PHP $ES ${VC}Version: ${VCL}$PhpVersion, ${VC}Memory Limit: ${VCL}$PhpMaxMemory"
    fi
    echo -e "$CP1$CP1$CZR$CP1$CP1\e[0;37m"
}

GenerateHtmlTheme () {
if [[ "$HideVersion" -eq 1 ]]; then
    shownVersion=""
else
    shownVersion="$ScriptVersion"
fi

# shellcheck disable=SC2162
read -d '' HtmlCode <<EOF
<!doctype html><html lang="en">
<head>
    <title>FireMotD</title>
    <meta charset="utf-8">
    <meta name="description" content="Generates a HTML MotD message">
    <meta name="author" content="OutsideIT">
    <!-- <script src=\"js/scripts.js\"></script> -->
    <style type="text/css">
        h1 {
            font-family: Verdana;
            font-weight: normal;
            color: #024457;
            font-weight: bold;
            padding-left:30px;
        }
        table a:link {
            color: #666;
            font-weight: bold;
            text-decoration:none;
        }
        table a:visited {
            color: #999999;
            font-weight:bold;
            text-decoration:none;
        }
        table a:active,
        table a:hover {
            color: #bd5a35;
            text-decoration:underline;
        }
        table {
            font-family:Arial, Helvetica, sans-serif;
            color:#666;
            font-size:12px;
            text-shadow: 1px 1px 0px #fff;
            background:#eaebec;
            margin:35px;
            width:80%;
            height:100%
            border:#ccc 3px solid;
            -moz-border-radius:3px;
            -webkit-border-radius:3px;
            border-radius:3px;
            -moz-box-shadow: 0 1px 2px #d1d1d1;
            -webkit-box-shadow: 0 1px 2px #d1d1d1;
            box-shadow: 0 1px 2px #d1d1d1;
        }
        table th {
            padding:12px 25px 12px 25px;
            border-top:2px solid #fafafa;
            border-bottom:2px solid #e0e0e0;
            font-size:22px;
            font-weight:bold;
            background: #ededed;
            background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));
            background: -moz-linear-gradient(top,  #ededed,  #ebebeb);
        }
        table th:first-child {
            text-align: left;
            padding-left:20px;
        }
        table tr:first-child th:first-child {
            -moz-border-radius-topleft:3px;
            -webkit-border-top-left-radius:3px;
            border-top-left-radius:3px;
        }
        table tr:first-child th:last-child {
            -moz-border-radius-topright:3px;
            -webkit-border-top-right-radius:3px;
            border-top-right-radius:3px;
        }
        table tr {
            text-align: left;
            padding-left: 20px;
        }
        table td:first-child {
            text-align: left;
            padding-left:20px;
            border-left: 0;
        }
        table td {
            padding: 8px;
            border-top: 1px solid #ffffff;
            border-bottom: 1px solid #e0e0e0;
            border-left: 2px solid #e0e0e0;

            background: #fafafa;
            background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
            background: -moz-linear-gradient(top,  #fbfbfb,  #fafafa);
        }
        table tr.even td {
            background: #f6f6f6;
            background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
            background: -moz-linear-gradient(top,  #f8f8f8,  #f6f6f6);
        }
        table tr:last-child td {
            border-bottom:0;
        }
        table tr:last-child td:first-child {
            -moz-border-radius-bottomleft:3px;
            -webkit-border-bottom-left-radius:3px;
            border-bottom-left-radius:3px;
        }
        table tr:last-child td:last-child {
            -moz-border-radius-bottomright:3px;
            -webkit-border-bottom-right-radius:3px;
            border-bottom-right-radius:3px;
        }
        table tr:hover td {
            background: #f2f2f2;
            background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#f0f0f0));
            background: -moz-linear-gradient(top,  #f2f2f2,  #f0f0f0);  
        }
        .strong {
            font-weight: bold; 
        }
        .em {
            font-style: italic; 
        }
        .right {
            text-align: right;
        }
        span {
            font-weight: bold; 
        }
    </style>
</head>
<body>
    <h1>System Overview - $HostName</h1>
    <table>
        <thead>
            <th>$HostName</th>
            <th class="right">$shownVersion</th>
        </thead>
        <tbody>
            <tr>
                <td>IP</td>
                <td><span>$HostIp</span></td>
            </tr>
            <tr>
                <td>Operating System</td>
                <td>$Release</td>
            </tr>
            <tr>
                <td>Kernel</td>
                <td>$Kernel</td>
            </tr>
            <tr>
                <td>Platform</td>
                <td>$Platform</td>
            </tr>
            <tr>
                <td>Uptime</td>
                <td><span>${UptimeDays}</span> day(s). <span>${UptimeHours}</span>:<span>${UptimeMinutes}</span>:<span>${UptimeSeconds}</span></td>
            </tr>
            <tr>
                <td>CPU Usage</td>
                <td><span>${CpuUtil}</span> average CPU usage over <span>$CpuProc</span> core(s)</td>
            </tr>
            <tr>
                <td>CPU Load</td>
                <td>$CpuLoad</td>
            </tr>
            <tr>
                <td>Memory</td>
                <td>Free: <span>${MemFree}</span>GB (<span>$MemFreePerc</span>%), Used: <span>${MemUsed}</span>GB (<span>$MemUsedPerc</span>%), Total: <span>${MemTotal}</span>GB</td>
            </tr>
            <tr>
                <td>Swap</td>
                <td>Free: <span>${SwapFree}</span>GB (<span>$SwapFreePerc</span>%), Used: <span>${SwapUsed}</span>GB (<span>$SwapUsedPerc</span>%), Total: <span>${SwapTotal}</span>GB</td>
            </tr>
            <tr>
                <td>Root</td>
                <td>Free: <span>${RootFree}</span>GB (<span>$RootFreePerc</span>%), Used: <span>${RootUsed}</span>GB (<span>$RootUsedPerc</span>%), Total: <span>${RootTotal}</span>GB</td>
            </tr>
            <tr>
                <td>Updates</td>
                <td><span>$UpdateCount</span> ${UpdateType} updates available</td>
            </tr>
            <tr>
                <td>Sessions</td>
                <td><span>$SessionCount</span></td>
            </tr>
            <tr>
                <td>Processes</td>
                <td><span>$ProcessCount</span> running processes of <span>$ProcessMax</span> maximum processes</td>
            </tr>
EOF
    
    [[ $PhpVersion =~ ^[0-9.]+$ ]] && HtmlCode+="
            <tr>
                <td>PHP Info</td>
                <td>Version: <span>$PhpVersion</span>, Memory Limit: $PhpMaxMemory</td>
            </tr>"
    [[ $HttpdVersion =~ ^[0-9.]+$ ]] && HtmlCode+="
            <tr>
                <td>Apache Info</td>
                <td>Version: <span>$HttpdVersion</span></td>
            </tr>"
    [[ ! -z $nginxVersion ]] && HtmlCode+="
            <tr>
                <td>nginx Info</td>
                <td>Version: <span>$nginxVersion</span></td>
            </tr>"   
    [[ ! -z $MySqlVersion ]] && HtmlCode+="
            <tr>
                <td>MySQL Info</td>
                <td>Version: <span>$MySqlVersion</span>, Distribution: <span>$MySqlDistribution</span></td>
            </tr>"
    [[ ! -z $PostgreSqlVersion ]] && HtmlCode+="
            <tr>
                <td>PostgreSQL Info</td>
                <td>Version: <span>$PostgreSqlVersion</span></td>
            </tr>"

    HtmlCode+="
        </tbody>
    </table>
</body>
</html>"
    echo "$HtmlCode"
}

# shellcheck disable=SC2154,SC2034
GenerateInvader () {
    f=3 b=4
    for j in f b; do
        for i in {0..7}; do
            printf -v $j$i %b "\e[${!j}${i}m"
        done
   done
   bld=$'\e[1m'
   rst=$'\e[0m'
cat << EOF
 $f1  ▀▄   ▄▀     $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4  ▀▄   ▄▀     $f5 ▄▄▄████▄▄▄    $f6  ▄██▄  $rst
 $f1 ▄█▀███▀█▄    $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4 ▄█▀███▀█▄    $f5███▀▀██▀▀███   $f6▄█▀██▀█▄$rst
 $f1█▀███████▀█   $f2▀▀███▀▀███▀▀   $f3▀█▀██▀█▀   $f4█▀███████▀█   $f5▀▀███▀▀███▀▀   $f6▀█▀██▀█▀$rst
 $f1▀ ▀▄▄ ▄▄▀ ▀   $f2 ▀█▄ ▀▀ ▄█▀    $f3▀▄    ▄▀   $f4▀ ▀▄▄ ▄▄▀ ▀   $f5 ▀█▄ ▀▀ ▄█▀    $f6▀▄    ▄▀$rst
 $f2 Hostname: $HostName  
 $f3 Ip: $HostIp 
 $f4 Os: $Release
 $f5 Kernel: $Kernel 
 $f6 Platform: $Platform  
 $bld$f1▄ ▀▄   ▄▀ ▄   $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4▄ ▀▄   ▄▀ ▄   $f5 ▄▄▄████▄▄▄    $f6  ▄██▄  $rst
 $bld$f1█▄█▀███▀█▄█   $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4█▄█▀███▀█▄█   $f5███▀▀██▀▀███   $f6▄█▀██▀█▄$rst
 $bld$f1▀█████████▀   $f2▀▀▀██▀▀██▀▀▀   $f3▀▀█▀▀█▀▀   $f4▀█████████▀   $f5▀▀▀██▀▀██▀▀▀   $f6▀▀█▀▀█▀▀$rst
 $bld$f1 ▄▀     ▀▄    $f2▄▄▀▀ ▀▀ ▀▀▄▄   $f3▄▀▄▀▀▄▀▄   $f4 ▄▀     ▀▄    $f5▄▄▀▀ ▀▀ ▀▀▄▄   $f6▄▀▄▀▀▄▀▄$rst
 $f2 Uptime ${UptimeDays} day(s). ${UptimeHours}:${UptimeMinutes}:${UptimeSeconds}
 $f3 CPU Usage: ${CpuUtil} average CPU usage over $CpuProc core(s) 
 $f4 CPU Load: $CpuLoad                                 
 $f5 Updates: $UpdateCount ${UpdateType} updates available                               $f7▌$rst
EOF
}

PrintHelp () {
    PrintVersion
    echo "
Usage: 
 $ScriptName [-v] -t <Theme Name> 
 $ScriptName [-v] -C ['String']
 $ScriptName [-vUhVs]

Options:
  -h | --help               Shows this help and exits
  -v | --verbose            Verbose mode (shows messages)
  -V | --version            Shows version information and exits
  -t | --theme <Theme Name> Shows Motd info on screen, based on the chosen theme
  -C | --colortest          Prints color test to screen
  -M | --colormap           Prints color test to screen, with color numbers in it
  -U | --updates            Checks for system updates and prints count to stdout
  -S | --saveupdates        Checks for system updates and saves count to disk
                            same as [ $ScriptName -U > $UpdateFile ]
 -HV | --hideversion        Hides version number

256-color themes:
 original
 modern
 gray
 orange
 invader

16-color themes:
 red
 blue
 clean

HTML theme:
 html

Examples:
 $ScriptName -t original
 $ScriptName -t html > /tmp/motd.html
 $ScriptName --theme Modern
 $ScriptName --colortest
 $ScriptName -M
 sudo $ScriptName --saveupdates

Note:
 Some functionalities may require superuser privileges. Eg. check for updates.
 If you have problems, try something like:
 sudo $ScriptName -S
"
    exit 0
}

PrintVersion () {
    cVersion="$(echo -e "${ScriptVersion}" | tr -d '[:space:]')"
    echo "$(basename "$0") v$cVersion"
    return 0
}

CheckSudo () {
    if [ "$EUID" -ne 0 ]; then 
        echo "Update check requires root privileges"
        echo "Example:"
        echo "    sudo $ScriptPath $1"
        exit 1
    fi
    return 0
}

if [[ -z $1 ]]; then
        echo "Error! You should provide an option / parameter."
        echo "Try:"
        echo "    $0 --help"
        exit 2
fi

while :; do
    case "$1" in
        -v|--verbose|--Verbose)
            Verbose=1 ; WriteLog Verbose Info "Verbose execution." ; shift ;;
        -V|--version|--Version)
            PrintVersion ; exit 0 ;;
        -h|--help|--Help)
            PrintHelp ; exit 0 ;;
        yum|YUM|Yum|Zypper|zypper|-U|--Updates|--updates|-Y)
            CheckSudo "$@" ; CountUpdates ; exit $? ;;
        -s|-S|--saveupdates|--SaveUpdates|--saveUpdates)
            CheckSudo "$@" ; CountUpdates > "$UpdateFile" && chmod 644 "$UpdateFile" ; exit $? ;;
        -E|--export|--Export)
            CheckSudo "$@" ; ExportData ; exit $? ;;
        -HV|--hideversion|--HideVersion)
            HideVersion=1 ; shift ;;
        -t|-T|--Theme|--theme)
            shift ; Theme=$1 
            case "$Theme" in
                original|Original) GatherInfo ; StartOriginalBlue ; GenerateOriginal256Color ;;
                modern|Modern) GatherInfo ; GenerateOriginal256Color ;;
                red|Red) GatherInfo ; StartRedTheme ; GenerateBasic16Color ;;
                blue|Blue) GatherInfo ; StartBlueTheme ; GenerateBasic16Color ;;
                gray|Gray) GatherInfo ; StartGrayTheme ; GenerateBasic16Color ;;
                orange|Orange) GatherInfo ; StartOrangeTheme ; GenerateBasic16Color ;;
                html|Html) GatherInfo ; GenerateHtmlTheme ;;
                blank|Blank|blanco|Blanco|Text|Clean|clean) GatherInfo ; GenerateBasic16Color ;;
                invader|Invader) GatherInfo ; GenerateInvader ;;
                *) echo "You specified a non-existant theme: $1" ; exit 2 ;;
            esac
            shift ;;
        -C|--Colortest|--colortest|--ColorTest|--colorTest) 
            ColorTest ; shift ;;
        -M|--Colormap|--colormap|--ColorMap|--colorMap) 
            ColorTest 0 ; shift ;;
        -*) echo "You specified a non-existant option: $1" ; exit 2 ;;
        *) break ;;
    esac
done

exit 0
